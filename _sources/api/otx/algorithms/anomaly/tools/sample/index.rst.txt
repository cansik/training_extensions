:py:mod:`otx.algorithms.anomaly.tools.sample`
=============================================

.. py:module:: otx.algorithms.anomaly.tools.sample

.. autoapi-nested-parse::

   `sample.py`.

   This is a sample python script showing how to train an end-to-end OTX Anomaly Classification Task.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.algorithms.anomaly.tools.sample.OtxAnomalyTask



Functions
~~~~~~~~~

.. autoapisummary::

   otx.algorithms.anomaly.tools.sample.parse_args
   otx.algorithms.anomaly.tools.sample.main



Attributes
~~~~~~~~~~

.. autoapisummary::

   otx.algorithms.anomaly.tools.sample.logger


.. py:data:: logger
   

   

.. py:class:: OtxAnomalyTask(dataset_path: str, train_subset: Dict[str, str], val_subset: Dict[str, str], test_subset: Dict[str, str], model_template_path: str, seed: Optional[int] = None)

   OTX Anomaly Classification Task.

   .. py:method:: get_dataclass() -> Union[Type[otx.algorithms.anomaly.adapters.anomalib.data.dataset.AnomalyDetectionDataset], Type[otx.algorithms.anomaly.adapters.anomalib.data.dataset.AnomalySegmentationDataset], Type[otx.algorithms.anomaly.adapters.anomalib.data.dataset.AnomalyClassificationDataset]]

      Gets the dataloader based on the task type.

      :raises ValueError: Validates task type.

      :returns: Dataloader


   .. py:method:: create_task_environment() -> otx.api.entities.task_environment.TaskEnvironment

      Create task environment.


   .. py:method:: create_task(task: str) -> Any

      Create base torch or openvino task.

      :param task: task type. Either base or openvino.
      :type task: str

      :returns: Base Torch or OpenVINO Task Class.
      :rtype: Any

      .. rubric:: Example

      >>> self.create_task(task="base")
      <anomaly_classification.torch_task.AnomalyClassificationTask>


   .. py:method:: train() -> otx.api.entities.model.ModelEntity

      Train the base Torch model.


   .. py:method:: infer(task: otx.api.usecases.tasks.interfaces.inference_interface.IInferenceTask, output_model: otx.api.entities.model.ModelEntity) -> otx.api.entities.resultset.ResultSetEntity

      Get the predictions using the base Torch or OpenVINO tasks and models.

      :param task: Task to infer. Either torch or openvino.
      :type task: IInferenceTask
      :param output_model: Output model on which the weights are saved.
      :type output_model: ModelEntity

      :returns: Results set containing the true and pred datasets.
      :rtype: ResultSetEntity


   .. py:method:: evaluate(task: otx.api.usecases.tasks.interfaces.evaluate_interface.IEvaluationTask, result_set: otx.api.entities.resultset.ResultSetEntity) -> None
      :staticmethod:

      Evaluate the performance of the model.

      :param task: Task to evaluate the performance. Either torch or openvino.
      :type task: IEvaluationTask
      :param result_set: Results set containing the true and pred datasets.
      :type result_set: ResultSetEntity


   .. py:method:: export() -> otx.api.entities.model.ModelEntity

      Export the model via openvino.


   .. py:method:: optimize() -> None

      Optimize the model via POT.


   .. py:method:: optimize_nncf() -> None

      Optimize the model via NNCF.


   .. py:method:: export_nncf() -> otx.api.entities.model.ModelEntity

      Export NNCF model via openvino.


   .. py:method:: clean_up() -> None
      :staticmethod:

      Clean up the `results` directory used by `anomalib`.



.. py:function:: parse_args() -> argparse.Namespace

   Parse CLI arguments.

   :returns: CLI arguments.
   :rtype: (Namespace)


.. py:function:: main() -> None

   Run `sample.py` with given CLI arguments.


