:py:mod:`otx.algorithms.anomaly.adapters.anomalib.exportable_code.anomaly_detection`
====================================================================================

.. py:module:: otx.algorithms.anomaly.adapters.anomalib.exportable_code.anomaly_detection

.. autoapi-nested-parse::

   Wrapper for Open Model Zoo for Anomaly Detection tasks.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.algorithms.anomaly.adapters.anomalib.exportable_code.anomaly_detection.AnomalyDetection




.. py:class:: AnomalyDetection(model_adapter, configuration=None, preload=False)

   Bases: :py:obj:`otx.algorithms.anomaly.adapters.anomalib.exportable_code.base.AnomalyBase`

   Wrapper for anomaly detection task.

   .. py:attribute:: __model__
      :annotation: = anomaly_detection

      

   .. py:method:: postprocess(outputs: Dict[str, numpy.ndarray], meta: Dict[str, Any]) -> numpy.ndarray

      Resize the outputs of the model to original image size.

      :param outputs: Raw outputs of the model after ``infer_sync`` is called.
      :type outputs: Dict[str, np.ndarray]
      :param meta: Metadata which contains values such as threshold, original image size.
      :type meta: Dict[str, Any]

      :returns: Detection Mask
      :rtype: np.ndarray



