:py:mod:`otx.algorithms.anomaly.adapters.anomalib.exportable_code.anomaly_classification`
=========================================================================================

.. py:module:: otx.algorithms.anomaly.adapters.anomalib.exportable_code.anomaly_classification

.. autoapi-nested-parse::

   Wrapper for Open Model Zoo for Anomaly Classification tasks.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.algorithms.anomaly.adapters.anomalib.exportable_code.anomaly_classification.AnomalyClassification




.. py:class:: AnomalyClassification(model_adapter, configuration=None, preload=False)

   Bases: :py:obj:`otx.algorithms.anomaly.adapters.anomalib.exportable_code.base.AnomalyBase`

   Wrapper for anomaly classification task.

   .. py:attribute:: __model__
      :annotation: = anomaly_classification

      

   .. py:method:: postprocess(outputs: Dict[str, numpy.ndarray], meta: Dict[str, Any]) -> float

      Resize the outputs of the model to original image size.

      :param outputs: Raw outputs of the model after ``infer_sync`` is called.
      :type outputs: Dict[str, np.ndarray]
      :param meta: Metadata which contains values such as threshold, original image size.
      :type meta: Dict[str, Any]

      :returns: Normalized anomaly score
      :rtype: float



