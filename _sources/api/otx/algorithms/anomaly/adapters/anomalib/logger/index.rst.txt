:py:mod:`otx.algorithms.anomaly.adapters.anomalib.logger`
=========================================================

.. py:module:: otx.algorithms.anomaly.adapters.anomalib.logger

.. autoapi-nested-parse::

   Logging.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   logger/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   otx.algorithms.anomaly.adapters.anomalib.logger.get_logger



.. py:function:: get_logger(name: str, log_file: Optional[str] = None, log_level: int = logging.INFO, file_mode: str = 'w') -> logging.Logger

   Get logger.

   If the logger has not been initialized, this method will initialize the
   logger by adding one or two handlers, otherwise the initialized logger will
   be directly returned. During initialization, a StreamHandler will always be
   added. If `log_file` is specified and the process rank is 0, a FileHandler
   will also be added.

   :param name: Logger name.
   :type name: str
   :param log_file: The log filename. If specified, a FileHandler
                    will be added to the logger.
   :type log_file: str | None
   :param log_level: The logger level. Notx that only the process of
                     rank 0 is affected, and other processes will set the level to
                     "Error" thus be silent most of the time.
   :type log_level: int
   :param file_mode: The file mode used in opening log file.
                     Defaults to 'w'.
   :type file_mode: str

   :returns: The expected logger.
   :rtype: logging.Logger


