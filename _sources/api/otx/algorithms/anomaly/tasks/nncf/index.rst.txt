:py:mod:`otx.algorithms.anomaly.tasks.nncf`
===========================================

.. py:module:: otx.algorithms.anomaly.tasks.nncf

.. autoapi-nested-parse::

   Anomaly Classification Task.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.algorithms.anomaly.tasks.nncf.NNCFTask




Attributes
~~~~~~~~~~

.. autoapisummary::

   otx.algorithms.anomaly.tasks.nncf.logger


.. py:data:: logger
   

   

.. py:class:: NNCFTask(task_environment: otx.api.entities.task_environment.TaskEnvironment)

   Bases: :py:obj:`otx.algorithms.anomaly.tasks.inference.InferenceTask`, :py:obj:`otx.api.usecases.tasks.interfaces.optimization_interface.IOptimizationTask`

   Base Anomaly Task.

   .. py:method:: _set_attributes_by_hyperparams()


   .. py:method:: load_model(otx_model: Optional[otx.api.entities.model.ModelEntity]) -> anomalib.models.AnomalyModule

      Create and Load Anomalib Module from OTX Model.

      This method checks if the task environment has a saved OTX Model,
      and creates one. If the OTX model already exists, it returns the
      the model with the saved weights.

      :param otx_model: OTX Model from the
                        task environment.
      :type otx_model: Optional[ModelEntity]

      :returns:

                Anomalib
                    classification or segmentation model with/without weights.
      :rtype: AnomalyModule


   .. py:method:: optimize(optimization_type: otx.api.usecases.tasks.interfaces.optimization_interface.OptimizationType, dataset: otx.api.entities.datasets.DatasetEntity, output_model: otx.api.entities.model.ModelEntity, optimization_parameters: Optional[otx.api.entities.optimization_parameters.OptimizationParameters] = None)

      Train the anomaly classification model.

      :param optimization_type: Type of optimization.
      :type optimization_type: OptimizationType
      :param dataset: Input dataset.
      :type dataset: DatasetEntity
      :param output_model: Output model to save the model weights.
      :type output_model: ModelEntity
      :param optimization_parameters: Training parameters
      :type optimization_parameters: OptimizationParameters


   .. py:method:: _model_info() -> Dict

      Return model info to save the model weights.

      :returns: Model info.
      :rtype: Dict


   .. py:method:: _export_to_onnx(onnx_path: str)

      Export model to ONNX.

      :param onnx_path: path to save ONNX file
      :type onnx_path: str



