:py:mod:`otx.api.utils.dataset_utils`
=====================================

.. py:module:: otx.api.utils.dataset_utils

.. autoapi-nested-parse::

   Dataset utils.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   otx.api.utils.dataset_utils.get_fully_annotated_idx
   otx.api.utils.dataset_utils.get_local_subset
   otx.api.utils.dataset_utils.get_global_subset
   otx.api.utils.dataset_utils.split_local_global_dataset
   otx.api.utils.dataset_utils.split_local_global_resultset
   otx.api.utils.dataset_utils.contains_anomalous_images



.. py:function:: get_fully_annotated_idx(dataset: otx.api.entities.datasets.DatasetEntity) -> List[int]

   Find the indices of the fully annotated items in a dataset.

   A dataset item is fully annotated if local annotations are available, or if the item has the `normal` label.

   :param dataset: Dataset that may contain both partially and fully annotated items.
   :type dataset: DatasetEntity

   :returns: List of indices of the fully annotated dataset items.
   :rtype: List[int]


.. py:function:: get_local_subset(dataset: otx.api.entities.datasets.DatasetEntity, fully_annotated_idx: Optional[List[int]] = None, include_normal: bool = True) -> otx.api.entities.datasets.DatasetEntity

   Extract a subset that contains only those dataset items that have local annotations.

   :param dataset: Dataset from which we want to extract the locally annotated subset.
   :type dataset: DatasetEntity
   :param fully_annotated_idx: The indices of the fully annotated dataset items. If not provided,
                               the function will compute the indices before creating the subset.
   :type fully_annotated_idx: Optional[List[int]]
   :param include_normal: When true, global normal annotations will be included in the local dataset.
   :type include_normal: bool

   :returns: Output dataset with only local annotations
   :rtype: DatasetEntity


.. py:function:: get_global_subset(dataset: otx.api.entities.datasets.DatasetEntity) -> otx.api.entities.datasets.DatasetEntity

   Extract a subset that contains only the global annotations.

   :param dataset: Dataset from which we want to extract the globally annotated subset.
   :type dataset: DatasetEntity

   :returns: Output dataset with only global annotations
   :rtype: DatasetEntity


.. py:function:: split_local_global_dataset(dataset: otx.api.entities.datasets.DatasetEntity) -> Tuple[otx.api.entities.datasets.DatasetEntity, otx.api.entities.datasets.DatasetEntity]

   Split a dataset into the globally and locally annotated subsets.

   :param dataset: Input dataset
   :type dataset: DatasetEntity

   :returns: Tuple of the globally and locally annotated subsets.
   :rtype: Tuple[DatasetEntity, DatasetEntity]


.. py:function:: split_local_global_resultset(resultset: otx.api.entities.resultset.ResultSetEntity) -> Tuple[otx.api.entities.resultset.ResultSetEntity, otx.api.entities.resultset.ResultSetEntity]

   Split a resultset into the globally and locally annotated resultsets.

   :param resultset: Input resultset
   :type resultset: ResultSetEntity

   :returns: Tuple of the globally and locally annotated resultsets.
   :rtype: Tuple[ResultSetEntity, ResultSetEntity]


.. py:function:: contains_anomalous_images(dataset: otx.api.entities.datasets.DatasetEntity) -> bool

   Check if a dataset contains any items with the anomalous label.

   :param dataset: Dataset to check for anomalous items.
   :type dataset: DatasetEntity

   :returns: True if the dataset contains anomalous items, False otherwise.
   :rtype: bool


