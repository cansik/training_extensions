:py:mod:`otx.api.utils.segmentation_utils`
==========================================

.. py:module:: otx.api.utils.segmentation_utils

.. autoapi-nested-parse::

   This module implements segmentation related utilities.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   otx.api.utils.segmentation_utils.mask_from_dataset_item
   otx.api.utils.segmentation_utils.mask_from_annotation
   otx.api.utils.segmentation_utils.create_hard_prediction_from_soft_prediction
   otx.api.utils.segmentation_utils.get_subcontours
   otx.api.utils.segmentation_utils.create_annotation_from_segmentation_map



Attributes
~~~~~~~~~~

.. autoapisummary::

   otx.api.utils.segmentation_utils.Contour


.. py:function:: mask_from_dataset_item(dataset_item: otx.api.entities.dataset_item.DatasetItemEntity, labels: List[otx.api.entities.label.LabelEntity]) -> numpy.ndarray

   Creates a mask from dataset item.

   The mask will be two dimensional, and the value of each pixel matches the class index with offset 1. The background
   class index is zero. labels[0] matches pixel value 1, etc. The class index is
   determined based on the order of 'labels'.

   :param dataset_item: Item to make mask for
   :param labels: The labels to use for creating the mask. The order of
                  the labels determines the class index.

   :returns: Numpy array of mask


.. py:function:: mask_from_annotation(annotations: List[otx.api.entities.annotation.Annotation], labels: List[otx.api.entities.label.LabelEntity], width: int, height: int) -> numpy.ndarray

   Generate a segmentation mask of a numpy image, and a list of shapes.

   The mask is will be two dimensional and the value of each pixel matches the class
   index with offset 1. The background class index is zero. labels[0] matches pixel
   value 1, etc. The class index is determined based on the order of `labels`:

   :param annotations: List of annotations to plot in mask
   :param labels: List of labels. The index position of the label
                  determines the class number in the segmentation mask.
   :param width: Width of the mask
   :param height: Height of the mask

   :returns: 2d numpy array of mask


.. py:function:: create_hard_prediction_from_soft_prediction(soft_prediction: numpy.ndarray, soft_threshold: float, blur_strength: int = 5) -> numpy.ndarray

   Creates a hard prediction containing the final label index per pixel.

   :param soft_prediction: Output from segmentation network. Assumes
                           floating point values, between 0.0 and 1.0. Can be a
                           2d-array of shape (height, width) or per-class segmentation
                           logits of shape (height, width, num_classes)
   :param soft_threshold: minimum class confidence for each pixel. The
                          higher the value, the more strict the segmentation is
                          (usually set to 0.5)
   :param blur_strength: The higher the value, the smoother the
                         segmentation output will be, but less accurate

   :returns: Numpy array of the hard prediction


.. py:data:: Contour
   

   

.. py:function:: get_subcontours(contour: Contour) -> List[Contour]

   Splits contour into subcontours that do not have self intersections.


.. py:function:: create_annotation_from_segmentation_map(hard_prediction: numpy.ndarray, soft_prediction: numpy.ndarray, label_map: dict) -> List[otx.api.entities.annotation.Annotation]

   Creates polygons from the soft predictions.

   Background label will be ignored and not be converted to polygons.

   :param hard_prediction: hard prediction containing the final label
                           index per pixel. See function
                           `create_hard_prediction_from_soft_prediction`.
   :param soft_prediction: soft prediction with shape H x W x N_labels,
                           where soft_prediction[:, :, 0] is the soft prediction for
                           background. If soft_prediction is of H x W shape, it is
                           assumed that this soft prediction will be applied for all
                           labels.
   :param label_map: dictionary mapping labels to an index. It is assumed
                     that the first item in the dictionary corresponds to the
                     background label and will therefore be ignored.

   :returns: List of shapes


