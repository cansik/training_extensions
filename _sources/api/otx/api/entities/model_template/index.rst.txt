:py:mod:`otx.api.entities.model_template`
=========================================

.. py:module:: otx.api.entities.model_template

.. autoapi-nested-parse::

   This file defines the ModelConfiguration, ModelEntity and Model classes.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.entities.model_template.TargetDevice
   otx.api.entities.model_template.ModelOptimizationMethod
   otx.api.entities.model_template.DatasetRequirements
   otx.api.entities.model_template.ExportableCodePaths
   otx.api.entities.model_template.TaskFamily
   otx.api.entities.model_template.TaskInfo
   otx.api.entities.model_template.TaskType
   otx.api.entities.model_template.HyperParameterData
   otx.api.entities.model_template.InstantiationType
   otx.api.entities.model_template.Dependency
   otx.api.entities.model_template.EntryPoints
   otx.api.entities.model_template.ModelTemplate
   otx.api.entities.model_template.NullModelTemplate



Functions
~~~~~~~~~

.. autoapisummary::

   otx.api.entities.model_template.task_type_to_label_domain
   otx.api.entities.model_template._parse_model_template_from_omegaconf
   otx.api.entities.model_template.parse_model_template
   otx.api.entities.model_template.parse_model_template_from_dict



Attributes
~~~~~~~~~~

.. autoapisummary::

   otx.api.entities.model_template.ANOMALY_TASK_TYPES
   otx.api.entities.model_template.TRAINABLE_TASK_TYPES


.. py:class:: TargetDevice

   Bases: :py:obj:`enum.IntEnum`

   Represents the target device for a given model.

   This device might be used for instance be used for training or inference.

   .. py:attribute:: UNSPECIFIED
      

      

   .. py:attribute:: CPU
      

      

   .. py:attribute:: GPU
      

      

   .. py:attribute:: VPU
      

      


.. py:class:: ModelOptimizationMethod

   Bases: :py:obj:`enum.Enum`

   Optimized model format.

   .. py:attribute:: TENSORRT
      

      

   .. py:attribute:: OPENVINO
      

      

   .. py:method:: __str__() -> str

      Returns ModelOptimizationMethod as string.



.. py:class:: DatasetRequirements

   Expected requirements for the dataset in order to use this algorithm.

   .. attribute:: classes

      Classes which must be present in the dataset

      :type: Optional[List[str]]

   .. py:attribute:: classes
      :annotation: :Optional[List[str]]

      


.. py:class:: ExportableCodePaths

   The paths to the different versions of the exportable code for a given model template.

   .. py:attribute:: default
      :annotation: :Optional[str]

      

   .. py:attribute:: openvino
      :annotation: :Optional[str]

      


.. py:class:: TaskFamily

   Bases: :py:obj:`enum.Enum`

   Overall task family.

   .. py:attribute:: VISION
      

      

   .. py:attribute:: FLOW_CONTROL
      

      

   .. py:attribute:: DATASET
      

      

   .. py:method:: __str__() -> str

      Returns task family as a string.



.. py:class:: TaskInfo

   Bases: :py:obj:`NamedTuple`

   Task information.

   NamedTuple to store information about the task type like label domain, if it is
   trainable, if it is an anomaly task and if it supports global or local labels.

   .. py:attribute:: domain
      :annotation: :otx.api.entities.label.Domain

      

   .. py:attribute:: is_trainable
      :annotation: :bool

      

   .. py:attribute:: is_anomaly
      :annotation: :bool

      

   .. py:attribute:: is_global
      :annotation: :bool

      

   .. py:attribute:: is_local
      :annotation: :bool

      


.. py:class:: TaskType(value: int, task_info: TaskInfo)

   Bases: :py:obj:`enum.Enum`

   The type of algorithm within the task family.

   Also contains relevant information about the task type like label domain, if it is trainable,
   if it is an anomaly task or if it supports global or local labels.

   :param value: (Unused) Unique integer for .value property of Enum (auto() does not work)
   :type value: int
   :param task_info: NamedTuple containing information about the task's capabilities
   :type task_info: TaskInfo

   .. py:attribute:: NULL
      

      

   .. py:attribute:: DATASET
      

      

   .. py:attribute:: CLASSIFICATION
      

      

   .. py:attribute:: SEGMENTATION
      

      

   .. py:attribute:: DETECTION
      

      

   .. py:attribute:: ANOMALY_DETECTION
      

      

   .. py:attribute:: CROP
      

      

   .. py:attribute:: TILE
      

      

   .. py:attribute:: INSTANCE_SEGMENTATION
      

      

   .. py:attribute:: ACTIVELEARNING
      

      

   .. py:attribute:: ANOMALY_SEGMENTATION
      

      

   .. py:attribute:: ANOMALY_CLASSIFICATION
      

      

   .. py:attribute:: ROTATED_DETECTION
      

      

   .. py:method:: __str__() -> str

      Returns name.


   .. py:method:: __repr__() -> str

      Returns name.



.. py:function:: task_type_to_label_domain(task_type: TaskType) -> otx.api.entities.label.Domain

   Links the task type to the label domain enum.

   Note that not all task types have an associated domain (e.g. crop task).
   In this case, a ``ValueError`` is raised.

   :param task_type: The task type to get the label domain for.
   :type task_type: TaskType

   :returns: The label domain for the task type.
   :rtype: Domain


.. py:class:: HyperParameterData

   HyperParameter Data.

   Class that contains the raw hyper parameter data, for those hyper parameters for the model that are
   user-configurable.

   .. attribute:: base_path

      The path to the yaml file specifying the base configurable parameters to use in the
      model. Defaults to None.

      :type: Optional[str]

   .. attribute:: parameter_overrides

      Nested dictionary that describes overrides for the metadata for the
      user-configurable hyper parameters that are used in the model. This allows multiple models to share the
      same base hyper-parameters, while for each individual model the defaults, parameter ranges, descriptions,
      etc. can still be customized.

      :type: Dict

   .. py:attribute:: base_path
      :annotation: :Optional[str]

      

   .. py:attribute:: parameter_overrides
      :annotation: :Dict

      

   .. py:attribute:: __data
      :annotation: :Dict

      

   .. py:attribute:: __has_valid_configurable_parameters
      :annotation: :bool

      

   .. py:method:: load_parameters(model_template_path: str)

      Load hyper parameters.

      Loads the actual hyper parameters defined in the file at `base_path`, and performs any overrides specified in
      the `parameter_overrides`.

      :param model_template_path: file path to the model template file in which the HyperParameters live.
      :type model_template_path: str


   .. py:method:: data() -> Dict
      :property:

      Returns a dictionary containing the set of hyper parameters defined in the ModelTemplate.

      This does not contain the actual parameter values, but instead holds the parameter schema's in
      a structured manner. The actual values should be either loaded from the database, or will be initialized from
      the defaults upon creating a configurable parameter object out of this data.


   .. py:method:: has_overrides() -> bool
      :property:

      Returns True if any parameter overrides are defined by the HyperParameters instance, False otherwise.


   .. py:method:: has_valid_configurable_parameters() -> bool
      :property:

      Check if configurable parameters are valid.

      Returns True if the HyperParameterData instance contains valid configurable parameters, extracted from the
      model template. False otherwise.


   .. py:method:: substitute_parameter_overrides()

      Carries out the parameter overrides specified in the `parameter_overrides` attribute.

      Validates whether the overridden parameters exist in the base set of configurable parameters,
      and whether the metadata values that should be overridden are valid metadata attributes.


   .. py:method:: __substitute_parameter_overrides(override_dict: Dict, parameter_dict: Dict)

      Substitutes parameters form override_dict into parameter_dict.

      Recursively substitutes overridden parameter values specified in `override_dict` into the base set of
      hyper parameters passed in as `parameter_dict`

      :param override_dict: dictionary containing the parameter overrides
      :type override_dict: Dict
      :param parameter_dict: dictionary that contains the base set of hyper parameters, in which the overridden
                             values are substituted
      :type parameter_dict: Dict


   .. py:method:: __remove_parameter_values_from_data(data: dict)
      :classmethod:

      This method removes the actual parameter values from the input parameter data.

      These values should be removed because the parameters should be instantiated
      from the default_values, instead of their values.

      NOTE: This method modifies its input dictionary, it does not return a new copy

      :param data: Parameter dictionary to remove values from


   .. py:method:: manually_set_data_and_validate(hyper_parameters: dict)

      This function is used to manually set the hyper parameter data from a dictionary.

      It is meant to be used in testing only, in cases where the model
      template is not backed up by an actual yaml file.

      :param hyper_parameters: Dictionary containing the data to be set
      :type hyper_parameters: Dict



.. py:class:: InstantiationType

   Bases: :py:obj:`enum.Enum`

   The method to instantiate a given task.

   .. py:attribute:: NONE
      

      

   .. py:attribute:: CLASS
      

      

   .. py:attribute:: GRPC
      

      

   .. py:method:: __str__() -> str

      Returns the name of the instantiation type.



.. py:class:: Dependency

   Dependency required by the task.

   .. attribute:: source

      Source of the dependency

      :type: str

   .. attribute:: destination

      Destination folder to install the dependency

      :type: str

   .. attribute:: size

      Size of the dependency in bytes

      :type: Optional[int]

   .. attribute:: sha256

      SHA-256 checksum of the dependency file

      :type: Optional[str]

   .. py:attribute:: source
      :annotation: :str

      

   .. py:attribute:: destination
      :annotation: :str

      

   .. py:attribute:: size
      :annotation: :Optional[int]

      

   .. py:attribute:: sha256
      :annotation: :Optional[str]

      


.. py:class:: EntryPoints

   Path of the Python classes implementing the task interface.

   .. attribute:: base

      Base interface implementing the functionality in a framework such as PyTorch or TensorFlow

      :type: str

   .. attribute:: openvino

      OpenVINO interface.

      :type: Optional[str]

   .. attribute:: nncf

      NNCF interface

      :type: Optional[str]

   .. py:attribute:: base
      :annotation: :str

      

   .. py:attribute:: openvino
      :annotation: :Optional[str]

      

   .. py:attribute:: nncf
      :annotation: :Optional[str]

      


.. py:class:: ModelTemplate

   This class represents a Task in the Task database.

   It can be either a CLASS type, with the class path specified or a GRPC type with its address.
   The task chain uses this information to setup a `ChainLink` (A task in the chain)

   model_template_id (str): ID of the model template
   model_template_path (str): path to the original model template file
   name (str): user-friendly name for the algorithm used in the task
   task_family (TaskFamily): overall task family of the task. One of VISION, FLOW_CONTROL AND DATASET.
   task_type (TaskType): Type of algorithm within task family.
   instantiation (InstantiationType): InstantiationType (CLASS or GRPC)
   summary (str): Summary of what the algorithm does. Defaults to "".
   framework (Optional[str]): The framework used by the algorithm. Defaults to None.
   max_nodes (int): Max number of nodes for training. Defaults to 1.
   application (Optional[str]): Name of the application solved by this algorithm. Defaults to None.
   dependencies (Liar[Dependency]): List of dependencies required by the algorithm. Defaults to empty `field`.
   initial_weights (Optional[str]): Optional URL to the initial weights used by the algorithm. Defaults to None
   training_targets (List[TargetDevice]): device used for training. Defaults to empty `field`.
   inference_targets (List[TargetDevices]): device used for inference. Defaults to empty `field`.
   dataset_requirements (DatasetRequirements): list of dataset requirements. Defaults to empty `field`.
   model_optimization_methods (List[ModelOptimizationMethod]): list of ModelOptimizationMethod.
       This lists all methods available to optimize the inference model for the task
   hyper_parameters (HyperParameterData): HyperParameterData object containing the base path to the configurable
       parameter definition, as well as any overrides for the base parameters that are specific for the
       current template.
   is_trainable (bool): specify whether task is trainable
   capabilities (List[str]): list of task capabilities
   grpc_address (Optional[str]): the grpc host address (for instantiation type == GRPC)
   entrypoints (Optional[Entrypoints]): Entrypoints implementing the Python task interface
   base_model_path (str): Path to template file for the base model used for nncf compression.
   exportable_code_paths (ExportableCodePaths): if it exists, the path to the exportable code sources.
       Defaults to empty `field`.
   task_type_sort_priority (int): priority of order of how tasks are shown in the pipeline dropdown for a given task
       type. E.g. for classification Inception is default and has weight 0. Unassigned priority will have -1 as
       priority. mobilenet is less important, and has a higher value. Default is zero (the highest priority).
   gigaflops (float): how many billions of operations are required to do inference on a single data item.
   size (float): how much disk space the model will approximately take.

   .. py:attribute:: model_template_id
      :annotation: :str

      

   .. py:attribute:: model_template_path
      :annotation: :str

      

   .. py:attribute:: name
      :annotation: :str

      

   .. py:attribute:: task_family
      :annotation: :TaskFamily

      

   .. py:attribute:: task_type
      :annotation: :TaskType

      

   .. py:attribute:: instantiation
      :annotation: :InstantiationType

      

   .. py:attribute:: summary
      :annotation: :str = 

      

   .. py:attribute:: framework
      :annotation: :Optional[str]

      

   .. py:attribute:: max_nodes
      :annotation: :int = 1

      

   .. py:attribute:: application
      :annotation: :Optional[str]

      

   .. py:attribute:: dependencies
      :annotation: :List[Dependency]

      

   .. py:attribute:: initial_weights
      :annotation: :Optional[str]

      

   .. py:attribute:: training_targets
      :annotation: :List[TargetDevice]

      

   .. py:attribute:: inference_targets
      :annotation: :List[TargetDevice]

      

   .. py:attribute:: dataset_requirements
      :annotation: :DatasetRequirements

      

   .. py:attribute:: model_optimization_methods
      :annotation: :List[ModelOptimizationMethod]

      

   .. py:attribute:: hyper_parameters
      :annotation: :HyperParameterData

      

   .. py:attribute:: is_trainable
      :annotation: :bool = True

      

   .. py:attribute:: capabilities
      :annotation: :List[str]

      

   .. py:attribute:: grpc_address
      :annotation: :Optional[str]

      

   .. py:attribute:: entrypoints
      :annotation: :Optional[EntryPoints]

      

   .. py:attribute:: base_model_path
      :annotation: :str = 

      

   .. py:attribute:: exportable_code_paths
      :annotation: :ExportableCodePaths

      

   .. py:attribute:: task_type_sort_priority
      :annotation: :int

      

   .. py:attribute:: gigaflops
      :annotation: :float = 0

      

   .. py:attribute:: size
      :annotation: :float = 0

      

   .. py:attribute:: hpo
      :annotation: :Optional[Dict]

      

   .. py:method:: __post_init__()

      Do sanitation checks before loading the hyper-parameters.


   .. py:method:: computes_uncertainty_score() -> bool

      Returns true if "compute_uncertainty_score" is in capabilities false otherwise.


   .. py:method:: computes_representations() -> bool

      Returns true if "compute_representations" is in capabilities.


   .. py:method:: is_task_global() -> bool

      Returns ``True`` if the task is global task i.e. if task produces global labels.


   .. py:method:: supports_auto_hpo() -> bool

      Returns `True` if the algorithm supports automatic hyper parameter optimization, `False` otherwise.



.. py:class:: NullModelTemplate

   Bases: :py:obj:`ModelTemplate`

   Represent an empty model template. Note that a task based on this model template cannot be instantiated.


.. py:data:: ANOMALY_TASK_TYPES
   :annotation: :Sequence[TaskType]

   

.. py:data:: TRAINABLE_TASK_TYPES
   :annotation: :Sequence[TaskType]

   

.. py:function:: _parse_model_template_from_omegaconf(config: Union[omegaconf.DictConfig, omegaconf.ListConfig]) -> ModelTemplate

   Parse an OmegaConf configuration into a model template.

   :param config: The configuration to parse.
   :type config: Union[DictConfig, ListConfig]

   :returns: The parsed model template.
   :rtype: ModelTemplate


.. py:function:: parse_model_template(model_template_path: str) -> ModelTemplate

   Read a model template from a file.

   :param model_template_path: Path to the model template template.yaml file
   :type model_template_path: str

   :returns: The model template parsed from the file.
   :rtype: ModelTemplate


.. py:function:: parse_model_template_from_dict(model_template_dict: dict) -> ModelTemplate

   Read a model template from a dictionary.

   Note that the model_template_id must be defined inside the dictionary.

   :param model_template_dict: Dictionary containing the model template.
   :type model_template_dict: dict

   :returns: The model template.
   :rtype: ModelTemplate


