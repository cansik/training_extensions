:py:mod:`otx.api.entities.shapes.ellipse`
=========================================

.. py:module:: otx.api.entities.shapes.ellipse

.. autoapi-nested-parse::

   This module implements the Ellipse shape entity.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.entities.shapes.ellipse.Ellipse




.. py:class:: Ellipse(x1: float, y1: float, x2: float, y2: float, modification_date: Optional[datetime.datetime] = None)

   Bases: :py:obj:`otx.api.entities.shapes.shape.Shape`

   Ellipse represents an ellipse that is encapsulated by a Rectangle.

   - x1 and y1 represent the top-left coordinate of the encapsulating rectangle
   - x2 and y2 representing the bottom-right coordinate of the encapsulating rectangle

   :param x1: left x coordinate of encapsulating rectangle
   :param y1: top y coordinate of encapsulating rectangle
   :param x2: right x coordinate of encapsulating rectangle
   :param y2: bottom y coordinate of encapsulating rectangle
   :param modification_date: last modified date

   .. py:method:: __repr__()

      Returns the representation of the Ellipse.


   .. py:method:: __eq__(other)

      Returns True if Ellipse is equal to other.


   .. py:method:: __hash__()

      Returns the hash of the Ellipse.


   .. py:method:: width() -> float
      :property:

      Returns the width [x-axis] of the ellipse.

      Example:

      >>> e1 = Ellipse(x1=0.5, x2=1.0, y1=0.0, y2=0.5)
      >>> e1.width
      0.5

      :returns: the width of the ellipse. (x-axis)


   .. py:method:: height() -> float
      :property:

      Returns the height [y-axis] of the ellipse.

      Example:

      >>> e1 = Ellipse(x1=0.5, x2=1.0, y1=0.0, y2=0.5)
      >>> e1.height
      0.5

      :returns: the height of the ellipse. (y-axis)


   .. py:method:: x_center() -> float
      :property:

      Returns the x coordinate in the center of the ellipse.


   .. py:method:: y_center() -> float
      :property:

      Returns the y coordinate in the center of the ellipse.


   .. py:method:: minor_axis() -> float
      :property:

      Returns the minor axis of the ellipse.

      Example:

      >>> e1 = Ellipse(x1=0.5, x2=1.0, y1=0.0, y2=0.4)
      >>> e1.minor_axis
      0.2

      :returns: minor axis of ellipse.


   .. py:method:: major_axis() -> float
      :property:

      Returns the major axis of the ellipse.

      Example:

      >>> e1 = Ellipse(x1=0.5, x2=1.0, y1=0.0, y2=0.4)
      >>> e1.major_axis
      0.25

      :returns: major axis of ellipse.


   .. py:method:: normalize_wrt_roi_shape(roi_shape: otx.api.entities.shapes.rectangle.Rectangle) -> Ellipse

      Transforms from the `roi` coordinate system to the normalized coordinate system.

      This function is the inverse of ``denormalize_wrt_roi_shape``.

      .. rubric:: Example

      Assume we have Ellipse `c1` which lives in the top-right quarter of a 2D space.
      The 2D space where `c1` lives in is an `roi` living in the top-left quarter of the normalized coordinate
      space. This function returns Ellipse `c1` expressed in the normalized coordinate space.

      >>> from otx.api.entities.annotation import Annotation
      >>> from otx.api.entities.shapes.rectangle import Rectangle
      >>> from otx.api.entities.shapes.ellipse import Ellipse
      >>> c1 = Ellipse(x1=0.5, y1=0.5, x2=0.6, y2=0.6)
      >>> roi = Rectangle(x1=0.0, x2=0.5, y1=0.0, y2=0.5)
      >>> normalized = c1.normalize_wrt_roi_shape(roi_shape)
      >>> normalized
      Ellipse(, x1=0.25, y1=0.25, x2=0.3, y2=0.3)

      :param roi_shape: Region of Interest

      :returns: New polygon in the image coordinate system


   .. py:method:: denormalize_wrt_roi_shape(roi_shape: otx.api.entities.shapes.rectangle.Rectangle) -> Ellipse

      Transforming shape from the normalized coordinate system to the `roi` coordinate system.

      This function is the inverse of ``normalize_wrt_roi_shape``

      .. rubric:: Example

      Assume we have Ellipse `c1` which lives in the top-right quarter of the normalized coordinate space.
      The `roi` is a rectangle living in the half right of the normalized coordinate space.
      This function returns Ellipse `c1` expressed in the coordinate space of `roi`. (should return top-half)

      Ellipse denormalized to a rectangle as ROI

      >>> from otx.api.entities.annotation import Annotation
      >>> from otx.api.entities.shapes.ellipse import Ellipse
      >>> c1 = Ellipse(x1=0.5, x2=1.0, y1=0.0, y2=0.5)  # An ellipse in the top right
      >>> roi = Rectangle(x1=0.5, x2=1.0, y1=0.0, y2=1.0)  # the half-right
      >>> normalized = c1.denormalize_wrt_roi_shape(roi_shape)  # should return top half
      >>> normalized
      Ellipse(, x1=0.0, y1=0.0, x2=1.0, y2=0.5)

      :param roi_shape: Region of Interest

      :returns: New polygon in the ROI coordinate system


   .. py:method:: get_evenly_distributed_ellipse_coordinates(number_of_coordinates: int = 50) -> List[Tuple[float, float]]

      Returns evenly distributed coordinates along the ellipse.

      Makes use of scipy.special.ellipeinc() which provides the numerical integral along the perimeter of the ellipse,
      and scipy.optimize.root() for solving the equal-arcs length equation for the angles.

      :param number_of_coordinates: number of evenly distributed points
                                    to generate along the ellipsis line

      :returns: list of tuple's with coordinates along the ellipse line


   .. py:method:: _as_shapely_polygon() -> shapely.geometry.Polygon


   .. py:method:: get_area() -> float

      Computes the approximate area of the Ellipse.

      Area is a value between 0 and 1, computed as
      `pi * vertex * co-vertex`.
          >>> Ellipse(x1=0, y1=0, x2=0.8, y2=0.4).get_area()
          0.25132741228718347

      :returns: area of the shape



