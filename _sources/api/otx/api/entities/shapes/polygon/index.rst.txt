:py:mod:`otx.api.entities.shapes.polygon`
=========================================

.. py:module:: otx.api.entities.shapes.polygon

.. autoapi-nested-parse::

   This module implements the Polygon Shape entity.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.entities.shapes.polygon.Point
   otx.api.entities.shapes.polygon.Polygon




.. py:class:: Point(x: float, y: float)

   This class defines a Point with an X and Y coordinate.

   Multiple points can be used to represent a Polygon

   .. py:attribute:: __slots__
      :annotation: = ['x', 'y']

      

   .. py:method:: __repr__()

      String representation of the point.


   .. py:method:: __eq__(other)

      Checks if two points have the same x and y coordinates.


   .. py:method:: normalize_wrt_roi(roi_shape: otx.api.entities.shapes.rectangle.Rectangle) -> Point

      The inverse of denormalize_wrt_roi_shape.

      Transforming Polygon from the `roi` coordinate system to the normalized coordinate system.
      This is used when the tasks want to save the analysis results.

      For example in Detection -> Segmentation pipeline, the analysis results of segmentation
      needs to be normalized to the roi (bounding boxes) coming from the detection.

      :param roi_shape: the shape of the roi
      :type roi_shape: Point


   .. py:method:: denormalize_wrt_roi_shape(roi_shape: otx.api.entities.shapes.rectangle.Rectangle) -> Point

      The inverse of normalize_wrt_roi_shape.

      Transforming Polygon from the normalized coordinate system to the `roi` coordinate system.
      This is used to pull ground truth during training process of the tasks.
      Examples given in the Shape implementations.

      :param roi_shape: the shape of the roi
      :type roi_shape: Rectangle



.. py:class:: Polygon(points: List[Point], modification_date: Optional[datetime.datetime] = None)

   Bases: :py:obj:`otx.api.entities.shapes.shape.Shape`

   Represents a polygon formed by a list of coordinates.

   NB Freehand drawings are also stored as polygons.

   :param points: list of Point's forming the polygon
   :param modification_date: last modified date

   .. py:method:: __repr__()

      String representation of the polygon.


   .. py:method:: __eq__(other)

      Compares if the polygon has the same points and modification date.


   .. py:method:: __hash__()

      Returns hash of the Polygon object.


   .. py:method:: normalize_wrt_roi_shape(roi_shape: otx.api.entities.shapes.rectangle.Rectangle) -> Polygon

      Transforms from the `roi` coordinate system to the normalized coordinate system.

      This function is the inverse of ``denormalize_wrt_roi_shape``.

      .. rubric:: Example

      Assume we have Polygon `p1` which lives in the top-right quarter of a 2D space.
      The 2D space where `p1` lives in is an `roi` living in the top-left quarter of the normalized coordinate
      space. This function returns Polygon `p1` expressed in the normalized coordinate space.

      >>> from otx.api.entities.annotation import Annotation
      >>> from otx.api.entities.shapes.rectangle import Rectangle
      >>> p1 = Polygon(points=[Point(x=0.5, y=0.0), Point(x=0.75, y=0.2), Point(x=0.6, y=0.1)])
      >>> roi = Rectangle(x1=0.0, x2=0.5, y1=0.0, y2=0.5)
      >>> normalized = p1.normalize_wrt_roi_shape(roi_shape)
      >>> normalized
      Polygon(, len(points)=3)

      :param roi_shape: Region of Interest

      :returns: New polygon in the image coordinate system


   .. py:method:: denormalize_wrt_roi_shape(roi_shape: otx.api.entities.shapes.rectangle.Rectangle) -> Polygon

      Transforming shape from the normalized coordinate system to the `roi` coordinate system.

      This function is the inverse of ``normalize_wrt_roi_shape``

      .. rubric:: Example

      Assume we have Polygon `p1` which lives in the top-right quarter of the normalized coordinate space.
      The `roi` is a rectangle living in the half right of the normalized coordinate space.
      This function returns Polygon `p1` expressed in the coordinate space of `roi`. (should return top-half)

      Polygon denormalized to a rectangle as ROI

      >>> from otx.api.entities.shapes.rectangle import Rectangle
      >>> from otx.api.entities.annotation import Annotation
      >>> p1 = Polygon(points=[Point(x=0.5, y=0.0), Point(x=0.75, y=0.2), Point(x=0.6, y=0.1)])
      >>> roi = Rectangle(x1=0.5, x2=1.0, y1=0.0, y2=1.0)  # the half-right
      >>> normalized = p1.denormalize_wrt_roi_shape(roi_shape)
      >>> normalized
      Polygon(, len(points)=3)

      :param roi_shape: Region of Interest

      :returns: New polygon in the ROI coordinate system


   .. py:method:: _as_shapely_polygon() -> shapely.geometry.Polygon

      Returns the Polygon object as a shapely polygon which is used for calculating intersection between shapes.


   .. py:method:: get_area() -> float

      Returns the approximate area of the shape.

      Area is a value between 0 and 1, computed by converting the Polygon to a shapely polygon and reading the
      `.area` property.

      NOTE: This method should not be relied on for exact area computation. The area is approximate, because shapes
      are continuous, but pixels are discrete.

      .. rubric:: Example

      >>> Polygon(points=[Point(x=0.0, y=0.5), Point(x=0.5, y=0.5), Point(x=0.75, y=0.75)]).get_area()
      0.0625

      :returns: area of the shape



