:py:mod:`otx.api.entities.metrics`
==================================

.. py:module:: otx.api.entities.metrics

.. autoapi-nested-parse::

   This module implements the Metric entities.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.entities.metrics.MetricEntity
   otx.api.entities.metrics.CountMetric
   otx.api.entities.metrics.InfoMetric
   otx.api.entities.metrics.DateMetric
   otx.api.entities.metrics.ScoreMetric
   otx.api.entities.metrics.DurationMetric
   otx.api.entities.metrics.CurveMetric
   otx.api.entities.metrics.MatrixMetric
   otx.api.entities.metrics.NullMetric
   otx.api.entities.metrics.VisualizationType
   otx.api.entities.metrics.ColorPalette
   otx.api.entities.metrics.VisualizationInfo
   otx.api.entities.metrics.TextChartInfo
   otx.api.entities.metrics.LineChartInfo
   otx.api.entities.metrics.BarChartInfo
   otx.api.entities.metrics.MatrixChartInfo
   otx.api.entities.metrics.MetricsGroup
   otx.api.entities.metrics.MatrixMetricsGroup
   otx.api.entities.metrics.LineMetricsGroup
   otx.api.entities.metrics.BarMetricsGroup
   otx.api.entities.metrics.TextMetricsGroup
   otx.api.entities.metrics.Performance
   otx.api.entities.metrics.NullPerformance
   otx.api.entities.metrics.MultiScorePerformance




Attributes
~~~~~~~~~~

.. autoapisummary::

   otx.api.entities.metrics._Metric
   otx.api.entities.metrics._VisualizationInfo


.. py:class:: MetricEntity

   This interface represents a metric, which is the smallest building block for the performance statistics.

   It only contains the name of the metric.
   See also :class:`MetricsGroup` and :class:`Performance` for the structure of performance statistics.

   .. py:attribute:: __name
      

      

   .. py:method:: name()
      :property:

      Returns the name of the Metric Entity.


   .. py:method:: type() -> str
      :staticmethod:

      Returns the type of the MetricEntity, e.g. "curve.



.. py:class:: CountMetric(name: str, value: int)

   Bases: :py:obj:`MetricEntity`

   This metric represents an integer value.

   :param name: The name of the metric
   :param value: The value of the metric

   .. rubric:: Example

   The count for number of images in a project

   >>> count_metric = CountMetric(name="Number of images", value=20)


   .. py:attribute:: value
      :annotation: :int

      

   .. py:method:: type()
      :staticmethod:

      Returns the type of the MetricEntity.



.. py:class:: InfoMetric(name: str, value: str)

   Bases: :py:obj:`MetricEntity`

   This metric represents a string value.

   :param name: The name of the info metric
   :param value: The info of the metric

   .. rubric:: Example

   An info metric of training from scratch

   >>> info_metric = InfoMetric(name="Model info", value="This model is trained from scratch")


   .. py:attribute:: value
      :annotation: :str

      

   .. py:method:: type()
      :staticmethod:

      Returns the type of the MetricEntity.



.. py:class:: DateMetric(name: str, date: Optional[datetime.datetime] = None)

   Bases: :py:obj:`MetricEntity`

   This metric represents a date time value.

   :param name: The name of the date metric
   :param date: The datetime value of the metric

   .. rubric:: Example

   A DateMetric for model creation date (e.g., now).

   >>> metric = DateMetric(name="Model creation", date=datetime.datetime.now(datetime.timezone.utc))


   .. py:attribute:: date
      :annotation: :datetime.datetime

      

   .. py:method:: type()
      :staticmethod:

      Returns the type of the MetricEntity.



.. py:class:: ScoreMetric(name: str, value: float)

   Bases: :py:obj:`MetricEntity`

   This metric represents a float value.

   This metric is typically used for storing performance metrics, such as accuracy, f-measure, dice score, etc.

   :param name: The name of the score
   :param value: The value of the score

   .. rubric:: Example

   Accuracy of a model

   >>> score_metric = ScoreMetric(name="Model accuracy", value=0.5)


   .. py:method:: __eq__(other: object) -> bool

      Returns True if the score metrics are equal.


   .. py:method:: __repr__()

      Returns the representation of the score metric.


   .. py:method:: type()
      :staticmethod:

      Returns the type of the MetricEntity.



.. py:class:: DurationMetric(name: str, hour: int, minute: int, second: float)

   Bases: :py:obj:`MetricEntity`

   This metric represents a duration metric, which include hour (int), minute (int), and second (float).

   :param name: The name of the duration metric
   :param hour: The hour value of the metric
   :param minute: The minute value of the metric
   :param second: The second value of the metric

   .. rubric:: Example

   Creating a metric for training duration of 1 hour 5 minutes.

   >>> duration_metric = DurationMetric(name="Training duration", hour=1, minute=5, second=0)


   .. py:method:: get_duration_string() -> str

      Returns the string representation of the duration.

      .. rubric:: Example

      Duration string of 1 hour 1 minute and 1.50 seconds.

      >>> from otx.api.entities.metrics import DurationMetric
      >>> dur_met = DurationMetric("test", 1, 1, 1.5)  # 1 hour 1 minute and 1.5 seconds
      >>> dur_met.get_duration_string()
      '1 hour 1 minute 1.50 seconds'

      :returns: the string representation of the duration.


   .. py:method:: from_seconds(name: str, seconds: float) -> DurationMetric
      :staticmethod:

      Returns a duration metrics, with name and converted durations from seconds.

      .. rubric:: Example

      Converting 70 seconds to duration metric.

      >>> from otx.api.entities.metrics import DurationMetric
      >>> dur_met = DurationMetric.from_seconds("test", 70)  # 1 hour 1 minute and 1.5 seconds
      >>> dur_met.get_duration_string()
      '1 minute 10.00 seconds'

      :param name:
      :param seconds:

      :returns: the duration metric with name and converted durations from seconds.
      :rtype: DurationMetric


   .. py:method:: type()
      :staticmethod:

      Returns the type of the MetricEntity.



.. py:class:: CurveMetric(name: str, ys: List[float], xs: Optional[List[float]] = None)

   Bases: :py:obj:`MetricEntity`

   This metric represents a curve. The coordinates are represented as x and y lists.

   .. rubric:: Example

   A line curve of: [(0,1), (1, 5), (2, 8)]

   >>> CurveMetric("Line", xs=[0, 1, 2], ys=[1, 5, 8])
   CurveMetric(name=`Line`, ys=(3 values), xs=(3 values))

   A curve can also be defined only using the y values. For example, a loss curve of loss values: [0.5, 0.2, 0.1].
   The x values will be automatically generated as a 1-based index (1, 2, 3, ...)

   >>> CurveMetric("Loss", ys=[0.5, 0.2, 0.1])
   CurveMetric(name=`Loss`, ys=(3 values), xs=(None values))

   :param name: The name of the curve
   :param xs: the list of floats in x-axis
   :param ys: the list of floats in y-axis

   .. py:method:: ys() -> List[float]
      :property:

      Returns the list of floats on y-axis.


   .. py:method:: xs() -> List[float]
      :property:

      Returns the list of floats on x-axis.


   .. py:method:: __repr__()

      Returns the string representation of the object.


   .. py:method:: type()
      :staticmethod:

      Returns the type of the MetricEntity.



.. py:class:: MatrixMetric(name: str, matrix_values: numpy.ndarray, row_labels: Optional[List[str]] = None, column_labels: Optional[List[str]] = None, normalize: bool = False)

   Bases: :py:obj:`MetricEntity`

   This metric represents a matrix. The cells are represented as a list of lists of integers.

   In the case of a confusion matrix, the rows represent the ground truth items and the columns represent the
   predicted items.

   .. rubric:: Example

   A matrix of: [[4,0,1], [0,3,2], [1,2,2]]

   >>> MatrixMetric("Confusion Matrix", matrix_values=np.array([[4,0,1], [0,3,2], [1,2,2]]))
   MatrixMetric(name=`Confusion Matrix`, matrix_values=(3x3) matrix, row labels=None, column labels=None)

   :param name: The name of the matrix
   :param matrix_values: the matrix data
   :param row_labels: labels for the rows
   :param column_labels: labels for the columns
   :param normalize: set to True to normalize each row of the matrix

   .. py:attribute:: __row_labels
      :annotation: :Optional[List[str]]

      

   .. py:attribute:: __column_labels
      :annotation: :Optional[List[str]]

      

   .. py:method:: matrix_values() -> numpy.ndarray
      :property:

      Returns the matrix data.


   .. py:method:: row_labels() -> Optional[List[str]]
      :property:

      Returns the row labels.


   .. py:method:: column_labels() -> Optional[List[str]]
      :property:

      Returns the column labels.


   .. py:method:: normalize()

      Normalizes the confusion matrix by dividing by the sum of the rows.


   .. py:method:: __repr__()

      Returns the string representation of the object.


   .. py:method:: type()
      :staticmethod:

      Returns the type of the MetricEntity.



.. py:class:: NullMetric

   Bases: :py:obj:`MetricEntity`

   Represents 'Metric not found'.

   .. py:method:: __repr__()

      Returns the string representation of the object.


   .. py:method:: __eq__(other)

      Returns True if the other object is a NullMetric.


   .. py:method:: type()
      :staticmethod:

      Returns the type of the MetricEntity.



.. py:class:: VisualizationType

   Bases: :py:obj:`enum.Enum`

   This enum defines how the metrics will be visualized on the UI.

   .. py:attribute:: TEXT
      :annotation: = 0

      

   .. py:attribute:: RADIAL_BAR
      :annotation: = 1

      

   .. py:attribute:: BAR
      :annotation: = 2

      

   .. py:attribute:: LINE
      :annotation: = 3

      

   .. py:attribute:: MATRIX
      :annotation: = 4

      


.. py:class:: ColorPalette

   Bases: :py:obj:`enum.Enum`

   Enum class specifying the color palette to be used by the UI to display statistics.

   If the statistics are per label, set to LABEL so the UI will use the label color palette.
   Otherwise, set to DEFAULT (allow the UI to choose a color palette)

   .. py:attribute:: DEFAULT
      :annotation: = 0

      

   .. py:attribute:: LABEL
      :annotation: = 1

      


.. py:class:: VisualizationInfo(name: str, visualisation_type: VisualizationType, palette: ColorPalette = ColorPalette.DEFAULT)

   This represents the visualization info a metrics group. See :class:`MetricsGroup`.

   .. py:attribute:: __type
      :annotation: :VisualizationType

      

   .. py:attribute:: name
      :annotation: :str

      

   .. py:method:: type() -> VisualizationType
      :property:

      Returns the type of the visualization.


   .. py:method:: __repr__()

      Returns the string representation of the object.



.. py:class:: TextChartInfo(name: str)

   Bases: :py:obj:`VisualizationInfo`

   This represents a visualization using text, which uses only a single string.

   .. py:method:: __repr__()

      Returns the string representation of the object.



.. py:class:: LineChartInfo(name: str, x_axis_label: str = None, y_axis_label: str = None, palette: ColorPalette = ColorPalette.DEFAULT)

   Bases: :py:obj:`VisualizationInfo`

   This represents a visualization using a line chart.

   .. py:attribute:: x_axis_label
      :annotation: :str

      

   .. py:attribute:: y_axis_label
      :annotation: :str

      

   .. py:method:: __repr__()

      Returns the string representation of the object.



.. py:class:: BarChartInfo(name: str, palette: ColorPalette = ColorPalette.DEFAULT, visualization_type: VisualizationType = VisualizationType.BAR)

   Bases: :py:obj:`VisualizationInfo`

   This represents a visualization using a bar chart.

   .. py:method:: __repr__()

      Returns the string representation of the object.



.. py:class:: MatrixChartInfo(name: str, header: str = None, row_header: str = None, column_header: str = None, palette: ColorPalette = ColorPalette.DEFAULT)

   Bases: :py:obj:`VisualizationInfo`

   This represents a visualization using a matrix.

   .. py:attribute:: header
      :annotation: :str

      

   .. py:attribute:: row_header
      :annotation: :str

      

   .. py:attribute:: column_header
      :annotation: :str

      

   .. py:method:: __repr__()

      Returns the string representation of the object.



.. py:data:: _Metric
   

   

.. py:data:: _VisualizationInfo
   

   

.. py:class:: MetricsGroup(metrics: Sequence[_Metric], visualization_info: _VisualizationInfo)

   Bases: :py:obj:`Generic`\ [\ :py:obj:`_Metric`\ , :py:obj:`_VisualizationInfo`\ ]

   This class aggregates a list of metric entities and defines how this group will be visualized on the UI.

   This class is the parent class to the different types of MetricsGroup that each represent a different type of chart
   in the UI.

   .. rubric:: Example

   An accuracy as a metrics group
       >>> acc = ScoreMetric("Accuracy", 0.5)
       >>> visual_info = BarChartInfo("Accuracy", visualization_type=_VisualizationInfo.BAR)  # show as radial bar
       >>> metrics_group = BarMetricsGroup([acc], visual_info)

   Loss curves as a metrics group
       >>> train_loss = CurveMetric("Train loss", xs=[0, 1, 2], ys=[5, 3, 1])
       >>> val_loss = CurveMetric("Validation", xs=[0, 1, 2], ys=[6, 4, 2])
       >>> visual_info = LineChartInfo("Loss curve", x_axis_label="# epoch", y_axis_label="Loss")
       >>> metrics_group = LineMetricsGroup([train_loss, val_loss], visual_info)


.. py:class:: MatrixMetricsGroup(metrics: Sequence[MatrixMetric], visualization_info: MatrixChartInfo)

   Bases: :py:obj:`MetricsGroup`\ [\ :py:obj:`MatrixMetric`\ , :py:obj:`MatrixChartInfo`\ ]

   This class represent a matrix chart in the UI.

   Multiple matrices can be displayed in the same chart.


.. py:class:: LineMetricsGroup(metrics: Sequence[CurveMetric], visualization_info: LineChartInfo)

   Bases: :py:obj:`MetricsGroup`\ [\ :py:obj:`CurveMetric`\ , :py:obj:`LineChartInfo`\ ]

   This class represent a line chart in the UI.

   Multiple lines can be displayed in a single chart.


.. py:class:: BarMetricsGroup(metrics: Sequence[Union[ScoreMetric, CountMetric]], visualization_info: BarChartInfo)

   Bases: :py:obj:`MetricsGroup`\ [\ :py:obj:`Union`\ [\ :py:obj:`ScoreMetric`\ , :py:obj:`CountMetric`\ ]\ , :py:obj:`BarChartInfo`\ ]

   This class represent a bar or radial bar chart in the UI.

   Each metric in the metrics group represents the value of a single bar/radial bar in the chart.


.. py:class:: TextMetricsGroup(metrics: Sequence[Union[ScoreMetric, CountMetric, InfoMetric, DateMetric, DurationMetric]], visualization_info: TextChartInfo)

   Bases: :py:obj:`MetricsGroup`\ [\ :py:obj:`Union`\ [\ :py:obj:`ScoreMetric`\ , :py:obj:`CountMetric`\ , :py:obj:`InfoMetric`\ , :py:obj:`DateMetric`\ , :py:obj:`DurationMetric`\ ]\ , :py:obj:`TextChartInfo`\ ]

   This class represent a text chart in the UI.

   Text charts contain only one metric, which can be of type CountMetric, ScoreMetric, DateMetric, DurationMetric or
   InfoMetric.


.. py:class:: Performance(score: ScoreMetric, dashboard_metrics: Optional[List[MetricsGroup]] = None)

   This performance class wraps the statistics of an entity (e.g., Model, Resultset).

   :param score: the performance score. This will be the point of
                 comparison between two performances.
   :param dashboard_metrics: (optional) additional statistics, containing
                             charts, curves, and other additional info.

   .. py:method:: score()
      :property:

      Return the score metric.


   .. py:method:: __eq__(other: object) -> bool

      Returns True if self and other have the same score and dashboard metrics.


   .. py:method:: __repr__()

      Returns a string representation of the performance.



.. py:class:: NullPerformance

   Bases: :py:obj:`Performance`

   This is used to represent 'Performance not found'.

   .. py:method:: __repr__()

      Returns a string representation of the performance.


   .. py:method:: __eq__(other)

      Returns True if other is a NullPerformance.



.. py:class:: MultiScorePerformance(primary_score: Optional[ScoreMetric] = None, additional_scores: Optional[List[ScoreMetric]] = None, dashboard_metrics: Optional[List[MetricsGroup]] = None)

   Bases: :py:obj:`Performance`

   This class can be used in tasks where performance is measured by multiple metrics.

   :param primary_score: The main performance score.
   :param additional_metrics: List of additional scores. When no primary
                              score is provided, the first additional score takes priority
                              as the main project score.
   :param dashboard_metrics: (optional) additional statistics, containing
                             charts, curves, and other additional info.

   .. py:method:: primary_score() -> Optional[ScoreMetric]
      :property:

      Return the primary score metric.


   .. py:method:: additional_scores() -> List[ScoreMetric]
      :property:

      Return the additional score metrics.


   .. py:method:: __eq__(other: object) -> bool

      Returns True if the other object is a MultiScorePerformance with the same primary and additional scores.


   .. py:method:: __repr__()

      Returns the representation of the performance.



