:py:mod:`otx.api.entities.label_schema`
=======================================

.. py:module:: otx.api.entities.label_schema

.. autoapi-nested-parse::

   This module implements the LabelSchema entity.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.entities.label_schema.LabelGroupType
   otx.api.entities.label_schema.LabelGroup
   otx.api.entities.label_schema.LabelGraph
   otx.api.entities.label_schema.LabelTree
   otx.api.entities.label_schema.LabelSchemaEntity




Attributes
~~~~~~~~~~

.. autoapisummary::

   otx.api.entities.label_schema.logger


.. py:data:: logger
   

   

.. py:exception:: LabelGroupExistsException

   Bases: :py:obj:`ValueError`

   Exception thrown if the LabelGroup already exists.


.. py:exception:: LabelGroupDoesNotExistException

   Bases: :py:obj:`ValueError`

   Exception thrown if the LabelGroup does not exist.


.. py:class:: LabelGroupType

   Bases: :py:obj:`enum.Enum`

   Enum to indicate the LabelGroupType.

   .. py:attribute:: EXCLUSIVE
      :annotation: = 1

      

   .. py:attribute:: EMPTY_LABEL
      :annotation: = 2

      


.. py:class:: LabelGroup(name: str, labels: Sequence[otx.api.entities.label.LabelEntity], group_type: LabelGroupType = LabelGroupType.EXCLUSIVE, id: otx.api.entities.id.ID = None)

   A label group which has exclusive (multiclass) or contains the empty label.

   Non-exclusive (multilabel) relationships are represented by multiple (exclusive)
   label groups.

   The labels have to be from one task.

   :param name: Descriptive name of the label group
   :type name: str
   :param labels: Labels that form the group
   :type labels: Sequence[LabelEntity]
   :param group_type: EXCLUSIVE or EMPTY_LABEL
   :type group_type: LabelGroupType
   :param id: ID of the LabelGroup. If no ID is provided, a new ObjectId()
              will be assigned
   :type id: ID

   .. py:method:: id() -> otx.api.entities.id.ID
      :property:

      DEPRECATED.


   .. py:method:: minimum_label_id() -> otx.api.entities.id.ID
      :property:

      Returns the minimum (oldest) label ID, which is the first label in self.labels since this list is sorted.


   .. py:method:: remove_label(label: otx.api.entities.label.LabelEntity) -> None

      Remove label from label group if it exists in the group.

      :param label: label to remove
      :type label: LabelEntity


   .. py:method:: is_single_label() -> bool

      Returns True if the label group only contains one label.

      :returns: True if the label group only contains one label.
      :rtype: bool


   .. py:method:: __eq__(other: object)

      Returns True if the LabelGroup is equal to the other object.


   .. py:method:: __repr__() -> str

      Returns the string representation of the LabelGroup.



.. py:class:: LabelGraph(directed: bool)

   Bases: :py:obj:`otx.api.entities.graph.Graph`

   Represents connectivity between labels as a graph. For example exclusivity or hierarchy.

   :param directed: whether the relationships are directed or undirected
                    (symmetrical)
   :type directed: bool

   .. py:method:: add_edges(edges)

      Add edges between Labels.


   .. py:method:: num_labels()
      :property:

      Returns the number of nodes in the graph.


   .. py:method:: type()
      :property:

      Returns the type of the LabelGraph.


   .. py:method:: subgraph(labels: Sequence[otx.api.entities.label.LabelEntity]) -> LabelGraph

      Return the subgraph containing the given labels.


   .. py:method:: __eq__(other) -> bool

      Returns True if the LabelGraph is equal to the other LabelGraph.



.. py:class:: LabelTree

   Bases: :py:obj:`otx.api.entities.graph.MultiDiGraph`

   Represents a hierarchy of labels in the form a tree.

   The tree is represented by a directed graph

   .. py:method:: add_edge(node1, node2, edge_value=None)

      Add edge between two nodes in the tree.

      :param node1: first node
      :param node2: second node
      :param edge_value: The value of the new edge. Defaults to None.


   .. py:method:: add_node(node)

      Add node to the tree.


   .. py:method:: add_edges(edges)

      Add edges between Labels.


   .. py:method:: remove_node(node)

      Remove node from the tree.


   .. py:method:: num_labels()
      :property:

      Return the number of labels in the tree.


   .. py:method:: clear_topological_cache()

      Clear the internal cache of the list of labels sorted in topological order.

      This function should be called if the topology of the graph has changed to
          prevent the cache from being stale.
      Note that it is automatically called when modifying the topology through the
          methods provided by this class.


   .. py:method:: get_labels_in_topological_order() -> List[otx.api.entities.label.LabelEntity]

      Return a list of the labels in this graph sorted in topological order.

      To avoid performance issues, the output of this function is cached.

      :returns: sorted list of labels
      :rtype: List[LabelEntity]


   .. py:method:: type()
      :property:

      Returns the type of the LabelTree.


   .. py:method:: add_child(parent: otx.api.entities.label.LabelEntity, child: otx.api.entities.label.LabelEntity)

      Add a `child` Label to `parent`.


   .. py:method:: get_parent(label: otx.api.entities.label.LabelEntity) -> Optional[otx.api.entities.label.LabelEntity]

      Returns the parent of `label`.

      :returns: the parent if it has one otherwise None


   .. py:method:: get_children(parent: otx.api.entities.label.LabelEntity) -> List[otx.api.entities.label.LabelEntity]

      Returns children of `parent`.


   .. py:method:: get_descendants(parent: otx.api.entities.label.LabelEntity) -> List[otx.api.entities.label.LabelEntity]

      Returns descendants (children and children of children, etc.) of `parent`.


   .. py:method:: get_siblings(label: otx.api.entities.label.LabelEntity) -> List[otx.api.entities.label.LabelEntity]

      Returns the siblings of a label.


   .. py:method:: get_ancestors(label: otx.api.entities.label.LabelEntity) -> List[otx.api.entities.label.LabelEntity]

      Returns ancestors of `label`, including self.


   .. py:method:: subgraph(labels: Sequence[otx.api.entities.label.LabelEntity]) -> LabelTree

      Return the subgraph containing the given labels.


   .. py:method:: __eq__(other) -> bool

      Check if two LabelTrees are equal.



.. py:class:: LabelSchemaEntity(label_tree: LabelTree = None, label_groups: List[LabelGroup] = None)

   This class represents the relationships of labels.

   This class currently keeps track of the following relationships:

   - parent/child label relationship
   - label group relationships

   :param label_tree: a hierarchy of labels represented as a tree
   :type label_tree: LabelTree
   :param label_groups: list of groups of labels that form logical groups.
                        E.g. a group of mutually exclusive labels.
   :type label_groups: List[LabelGroup]

   .. py:method:: get_labels(include_empty: bool) -> List[otx.api.entities.label.LabelEntity]

      Get the labels in the label schema.

      :param include_empty: flag determining whether to include empty
                            labels
      :type include_empty: bool

      :returns: list of all labels in the label schema
      :rtype: List[LabelEntity]


   .. py:method:: get_groups(include_empty: bool = False) -> List[LabelGroup]

      Get the label groups in the label schema.

      :param include_empty: flag determining whether to include empty
                            label groups
      :type include_empty: bool

      :returns: list of all label groups in the label schema
      :rtype: List[LabelGroup]


   .. py:method:: add_group(label_group: LabelGroup)

      Adding a group to label schema.

      :param label_group: label group to add
      :type label_group: LabelGroup

      :returns: None


   .. py:method:: add_child(parent: otx.api.entities.label.LabelEntity, child: otx.api.entities.label.LabelEntity)

      Add a `child` Label to `parent`.


   .. py:method:: get_parent(label: otx.api.entities.label.LabelEntity) -> Optional[otx.api.entities.label.LabelEntity]

      Returns the parent of `label`.

      :returns: the parent if it has one otherwise None
      :rtype: Optional[LabelEntity]


   .. py:method:: get_label_ids(include_empty: bool) -> List[otx.api.entities.id.ID]

      Returns a list of label ids that are in the LabelSchema.

      :param include_empty: Include empty label id or not.
      :type include_empty: bool

      :returns: sorted list of label ids
      :rtype: List[ID]


   .. py:method:: get_label_group_by_name(group_name: str) -> Optional[LabelGroup]

      Get the label group by the passed group_name.

      :param group_name: name of the group to get
      :type group_name: str

      :returns: Optional[LabelGroup]


   .. py:method:: get_exclusive_groups() -> List[LabelGroup]

      Returns exclusive groups in the LabelSchema.


   .. py:method:: add_labels_to_group_by_group_name(group_name: str, labels: Sequence[otx.api.entities.label.LabelEntity])

      Adds `labels` to group named `group_name`.

      :param labels: list of Label
      :type labels: str
      :param group_name: group name
      :type group_name: Sequence[LabelEntity]

      :raises LabelGroupDoesNotExistException: This is raised if the group
          does not exist


   .. py:method:: __append_group(label_group: LabelGroup)

      Convenience function for appending `label_group` to the necessary internal data structures.

      :param label_group: label group to append
      :type label_group: LabelGroup


   .. py:method:: are_exclusive(label1: otx.api.entities.label.LabelEntity, label2: otx.api.entities.label.LabelEntity) -> bool

      Returns whether `label` and `label2` are mutually exclusive.


   .. py:method:: get_children(parent: otx.api.entities.label.LabelEntity) -> List[otx.api.entities.label.LabelEntity]

      Return a list of the children of the passed parent Label.


   .. py:method:: get_siblings_in_group(label: otx.api.entities.label.LabelEntity) -> List[otx.api.entities.label.LabelEntity]

      Return a list of the 'siblings', which are all labels within the same group as a label.


   .. py:method:: get_descendants(parent: otx.api.entities.label.LabelEntity) -> List[otx.api.entities.label.LabelEntity]

      Returns descendants (children and children of children, etc.) of `parent`.


   .. py:method:: get_ancestors(label: otx.api.entities.label.LabelEntity) -> List[otx.api.entities.label.LabelEntity]

      Returns ancestors of `label`, including self.


   .. py:method:: get_group_containing_label(label: otx.api.entities.label.LabelEntity) -> Optional[LabelGroup]

      Returns the label group which contains the label.

      :param label: the query label
      :type label: LabelEntity

      :returns: the group containing the label
      :rtype: Optional[LabelGroup]


   .. py:method:: get_labels_exclusive_to(label: otx.api.entities.label.LabelEntity) -> List[otx.api.entities.label.LabelEntity]

      Returns a list of labels that are exclusive to the passed label.


   .. py:method:: __get_exclusivity_recursion(label: otx.api.entities.label.LabelEntity, add_empty: bool = True) -> List[otx.api.entities.label.LabelEntity]

      Recursively computes all labels exclusive to a non-empty label.

      A label is exclusive with:
          - All labels in the same group
          - All children of labels in the same group
          - All labels in the same group as any of the label's ancestors
          - All children of labels in the same group as any of the label's ancestors
          - All empty labels that are not descendants of the label

      :param label: The label to get exclusive labels for
      :type label: LabelEntity
      :param add_empty: If set to True, adds all empty labels that are
                        not descendants of the label. This is only
      :type add_empty: bool

      needed for the first recursion iteration.

      :returns: List of labels exclusive to the label.
      :rtype: List[LabelEntity]


   .. py:method:: __get_exclusivity_for_empty_label(label: otx.api.entities.label.LabelEntity) -> List[otx.api.entities.label.LabelEntity]

      Get the labels exclusive to an empty label.

      For an empty label, all labels are exclusive to it except it's ancestors.

      :param label: empty Label to get exclusive labels for
      :type label: LabelEntity

      :returns: List of Labels exclusive to the Label
      :rtype: List[LabelEntity]


   .. py:method:: __get_label(label: Union[otx.api.entities.scored_label.ScoredLabel, otx.api.entities.label.LabelEntity]) -> otx.api.entities.label.LabelEntity
      :staticmethod:

      Returns Label object from possibly non-label object.

      :param label: label to get Label object for
      :type label: Union[ScoredLabel, LabelEntity]

      :returns: Label object
      :rtype: LabelEntity


   .. py:method:: __repr__() -> str

      String representation of LabelSchemaEntity.


   .. py:method:: __eq__(other) -> bool

      Returns whether two LabelSchemaEntities are equal.


   .. py:method:: from_labels(labels: Sequence[otx.api.entities.label.LabelEntity]) -> LabelSchemaEntity
      :classmethod:

      Create LabelSchemaEntity from a list of exclusive labels.

      :param labels: list of labels
      :type labels: Sequence[LabelEntity]

      :returns: LabelSchemaEntity from the given labels


   .. py:method:: resolve_labels_probabilistic(scored_labels: List[otx.api.entities.scored_label.ScoredLabel], selected_labels: List[otx.api.entities.label.LabelEntity] = None) -> List[otx.api.entities.scored_label.ScoredLabel]

      Resolves hierarchical labels and exclusivity based on a list of ScoredLabels (labels with probability).

      The following two steps are taken:

      - selects the most likely label from an exclusive (multiclass) group
      - removes children of "not-most-likely" (non-max) parents in an exclusive group (top-down approach)

      The method is intended to post-process the output of probabilistic systems such as predictions coming from
      machine learning methods to resolve ambiguities and logical impossibilities. When processing (non-probabilistic)
      user input please use `complete_labels` instead.

      :param scored_labels: a list of ScoredLabels (labels with
                            probability)
      :type scored_labels: List[ScoredLabel]
      :param selected_labels: if not None, will only consider labels
                              within `selected_labels` for resolving. Any other labels
                              which have relations with selected_labels (e.g. parent),
                              but are outside `selected_labels` are set to a default
                              probability of 1.0
      :type selected_labels: List[LabelEntity]


   .. py:method:: __resolve_labels_probabilistic(label_to_probability: Dict[otx.api.entities.label.LabelEntity, float], selected_labels: Optional[Sequence[otx.api.entities.label.LabelEntity]]) -> List[otx.api.entities.scored_label.ScoredLabel]

      Resolves hierarchical labels and exclusivity based on a probabilistic label output.

      - selects the most likely (max) label from an exclusive group
      - removes children of non-max parents in an exclusive group

      See `resolve_labels_probabilistic` for parameter descriptions

      :param label_to_probability: map from `Label` to float.
      :type label_to_probability: Dict[LabelEntity, float]
      :param selected_labels: Subset of labels.
      :type selected_labels: Optional[Sequence[LabelEntity]]

      :returns: List of ScoredLabels (labels with probability)
      :rtype: List[ScoredLabel]


   .. py:method:: __suppress_descendant_output(hard_classification: Dict[otx.api.entities.label.LabelEntity, float]) -> Dict[otx.api.entities.label.LabelEntity, float]

      Suppresses outputs in `label_to_probability`.

      Sets probability to 0.0 for descendants of parents that have 0 probability in `hard_classification`.


   .. py:method:: __resolve_exclusive_labels(label_to_probability: Dict[otx.api.entities.label.LabelEntity, float]) -> Dict[otx.api.entities.label.LabelEntity, float]

      Resolve exclusive labels.

      For labels in `label_to_probability` sets labels that are most likely (maximum probability) in their exclusive
      group to 1.0 and other (non-max) labels to probability 0.


   .. py:method:: __add_missing_ancestors(label_to_probability: Dict[otx.api.entities.label.LabelEntity, float], selected_labels: Optional[Sequence[otx.api.entities.label.LabelEntity]]) -> Dict[otx.api.entities.label.LabelEntity, float]

      Adds missing ancestors (of the same task) to the `label_to_probability` map.

      Missing ancestors get probability `probability`



