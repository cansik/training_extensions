:py:mod:`otx.api.entities.train_parameters`
===========================================

.. py:module:: otx.api.entities.train_parameters

.. autoapi-nested-parse::

   This module implements the TrainingParameters entity.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.entities.train_parameters.UpdateProgressCallback
   otx.api.entities.train_parameters.TrainParameters



Functions
~~~~~~~~~

.. autoapisummary::

   otx.api.entities.train_parameters.default_progress_callback
   otx.api.entities.train_parameters.default_save_model_callback



.. py:class:: UpdateProgressCallback

   Bases: :py:obj:`Protocol`

   UpdateProgressCallback protocol.

   Used as a replacement of Callable[] type since Callable doesnâ€™t handle default parameters like
   `score: Optional[float] = None`

   .. py:method:: __call__(progress: int, score: Optional[float] = None)

      Callback to provide updates about the progress of a task.

      It is recommended to call this function at least once per epoch.
      However, the exact frequency is left to the task implementer.

      An optional `score` can also be passed. If specified, this score can be used by HPO
      to monitor the improvement of the task.

      :param progress: Progress as a percentage
      :param score: Optional validation score



.. py:function:: default_progress_callback(progress: int, score: Optional[float] = None)

   Default progress callback. It is a placeholder (does nothing) and is used in empty TrainParameters.


.. py:function:: default_save_model_callback()

   Default save model callback. It is a placeholder (does nothing) and is used in empty TrainParameters.


.. py:class:: TrainParameters

   Train parameters.

   .. attribute:: resume

      Set to ``True`` if training must be resume with the
      optimizer state; set to ``False`` to discard the optimizer
      state and start with fresh optimizer

   .. attribute:: update_progress

      Callback which can be used to provide updates
      about the progress of a task.

   .. attribute:: save_model

      Callback to notify that the model weights have been
      changed. This callback can be used by the task when
      temporary weights should be saved (for instance, at the end
      of an epoch). If this callback has been used to save
      temporary weights, those weights will be used to resume
      training if for some reason training was suspended.

   .. py:attribute:: resume
      :annotation: :bool = False

      

   .. py:attribute:: update_progress
      :annotation: :Callable[[int, Optional[float]], Any]

      

   .. py:attribute:: save_model
      :annotation: :Callable[[], None]

      


