:py:mod:`otx.api.entities.interfaces.graph_interface`
=====================================================

.. py:module:: otx.api.entities.interfaces.graph_interface

.. autoapi-nested-parse::

   This module implements the Graph interface.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.entities.interfaces.graph_interface.IGraph




.. py:class:: IGraph

   This interface describes how the interface of the Graph looks like.

   This interface is used to represent the TaskGraph inside project as well as the label tree inside LabelSchema

   .. py:method:: add_node(node)
      :abstractmethod:

      Add node to the graph.


   .. py:method:: add_edge(node1, node2)
      :abstractmethod:

      Add an edge between node1 and node2.


   .. py:method:: has_edge_between(node1, node2)
      :abstractmethod:

      Returns whether there is an edge between `node1` and `node2`.


   .. py:method:: neighbors(node) -> List[dict]
      :abstractmethod:

      Returns neighbors of `node`.


   .. py:method:: find_cliques() -> Iterator[List[dict]]
      :abstractmethod:

      Returns cliques in the graph.


   .. py:method:: num_nodes() -> int
      :abstractmethod:

      Returns number of nodes.


   .. py:method:: remove_edges(node1, node2) -> None
      :abstractmethod:

      Removes the edges between two nodes.


   .. py:method:: find_out_edges(node) -> networkx.reportviews.OutMultiEdgeView
      :abstractmethod:

      Returns the edges coming out of the node.


   .. py:method:: find_in_edges(node) -> networkx.reportviews.InMultiEdgeView
      :abstractmethod:

      Returns the edges coming in to the node.


   .. py:method:: edges() -> networkx.reportviews.OutMultiEdgeView
      :property:

      Returns the edges in the Graph.


   .. py:method:: nodes() -> networkx.reportviews.NodeView
      :property:

      Return nodes in the graph.



