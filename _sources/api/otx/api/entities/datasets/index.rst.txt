:py:mod:`otx.api.entities.datasets`
===================================

.. py:module:: otx.api.entities.datasets

.. autoapi-nested-parse::

   This module implements the Dataset entity.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.entities.datasets.DatasetPurpose
   otx.api.entities.datasets.DatasetIterator
   otx.api.entities.datasets.DatasetEntity




Attributes
~~~~~~~~~~

.. autoapisummary::

   otx.api.entities.datasets.logger


.. py:data:: logger
   

   

.. py:class:: DatasetPurpose

   Bases: :py:obj:`enum.Enum`

   Describes the purpose for the dataset.

   This makes it possible to identify datasets for a particular use.

   .. py:attribute:: INFERENCE
      :annotation: = 0

      

   .. py:attribute:: TRAINING
      :annotation: = 1

      

   .. py:attribute:: EVALUATION
      :annotation: = 2

      

   .. py:attribute:: GENERATING_OUTPUT
      :annotation: = 3

      

   .. py:attribute:: TEMPORARY_DATASET
      :annotation: = 4

      

   .. py:attribute:: TASK_INFERENCE
      :annotation: = 5

      

   .. py:method:: __str__()

      Returns the dataset purpose as string.



.. py:class:: DatasetIterator(dataset: DatasetEntity)

   Bases: :py:obj:`collections.abc.Iterator`

   This DatasetIterator iterates over the dataset lazily.

   Implements collections.abc.Iterator.

   :param dataset: Dataset to iterate over.
   :type dataset: DatasetEntity

   .. py:method:: __next__() -> otx.api.entities.dataset_item.DatasetItemEntity

      Returns the next dataset item.

      :raises StopIteration: if the end of the dataset is reached.

      :returns: Dataset item.
      :rtype: DatasetItemEntity



.. py:class:: DatasetEntity(items: Optional[List[otx.api.entities.dataset_item.DatasetItemEntity]] = None, purpose: DatasetPurpose = DatasetPurpose.INFERENCE)

   A dataset consists of a list of DatasetItemEntities and a purpose.

   ## With dataset items

       This way assumes the dataset item entities are constructed before the dataset entity is made.

       >>> from otx.api.entities.image import Image
       >>> from otx.api.entities.annotation import NullAnnotationSceneEntity
       >>> from otx.api.entities.dataset_item import DatasetItemEntity
       >>> item = DatasetItemEntity(media=Image(file_path="image.jpg"), annotation_scene=NullAnnotationSceneEntity())
       >>> dataset = DatasetEntity(items=[item])

   ## Iterate over dataset

       Regardless of the instantiation method chosen, the Dataset will work the same.
       The dataset can be iterated:

       >>> dataset = DatasetEntity(items=[item_1])
       >>> for dataset_item in dataset:
       ...     print(dataset_item)
       DatasetItemEntity(
           media=Image(image.jpg, width=640, height=480),
           annotation_scene=NullAnnotationSceneEntity(),
           roi=Annotation(
               shape=Rectangle(
                   x=0.0,
                   y=0.0,
                   width=1.0,
                   height=1.0
                   ),
                   labels=[],
                   id=6149e454893b7ebbe3a8faf6
               ),
           subset=NONE
       )

       A particular item can also be fetched:

       >>> first_item = dataset[0]

       Or a slice:

       >>> first_ten = dataset[:10]
       >>> last_ten = dataset[-10:]

   ## Get a subset of Dataset

       To get the test data for validating the network:

       >>> dataset = DatasetEntity()
       >>> testing_subset = dataset.get_subset(Subset.TESTING)

       This subset is also a DatasetEntity. The entities in the subset dataset refer to the same entities as
       in the original dataset. Altering one of the objects in the subset, will also alter them in the original.

   :param items: A list of dataset items to create dataset with. Defaults to None.
   :type items: Optional[List[DatasetItemEntity]]
   :param purpose: Purpose for dataset. Refer to :class:`DatasetPurpose` for more info.
                   Defaults to DatasetPurpose.INFERENCE.
   :type purpose: DatasetPurpose

   .. py:method:: purpose() -> DatasetPurpose
      :property:

      Returns the DatasetPurpose. For example DatasetPurpose.ANALYSIS.

      :returns: DatasetPurpose


   .. py:method:: _fetch(key: Union[slice, int]) -> Union[otx.api.entities.dataset_item.DatasetItemEntity, List[otx.api.entities.dataset_item.DatasetItemEntity]]

      Fetch the given entity/entities from the items.

      Helper function for __getitem__

      :param key: Key called on the dataset. E.g. int (dataset[0]) or slice (dataset[5:9])
      :type key: Union[slice, int]

      :raises TypeError: If key is not a slice or int.

      :returns: The entity/entities requested.
      :rtype: Union[DatasetItemEntity, List[DatasetItemEntity]]


   .. py:method:: __repr__()

      Returns string representation of the dataset.


   .. py:method:: __str__()

      Returns string representation of the dataset.


   .. py:method:: __len__()

      Returns the number of items in the dataset.


   .. py:method:: __eq__(other: object) -> bool

      Checks whether the dataset is equal to the operand.

      :param other: the dataset operand to the equal operator.
      :type other: DatasetEntity

      :returns: True if the datasets are equal
      :rtype: bool


   .. py:method:: __add__(other: Union[DatasetEntity, List[otx.api.entities.dataset_item.DatasetItemEntity]]) -> DatasetEntity

      Returns a new dataset which contains the items of self added with the input dataset.

      Note that additional info of the dataset might be incoherent to the addition operands.

      :param other: dataset to be added to output
      :type other: Union[DatasetEntity, List[DatasetItemEntity]]

      :returns: new dataset with the items of self added with the input dataset
      :rtype: DatasetEntity


   .. py:method:: __getitem__(key: int) -> otx.api.entities.dataset_item.DatasetItemEntity
               __getitem__(key: slice) -> List[otx.api.entities.dataset_item.DatasetItemEntity]

      Return a DatasetItemEntity or a list of DatasetItemEntity, given a slice or an integer.

      .. rubric:: Example

      Given an integer index:

      >>> dataset = DatasetEntity(items=[...])
      >>> first_item = dataset[0]

      Or a slice:

      >>> first_ten = dataset[0:9]
      >>> last_ten = dataset[-9:]

      :param key: key to fetch. Should be `slice` or `int`
      :type key: Union[slice, int]

      :returns: List of DatasetItemEntity or single DatasetItemEntity
      :rtype: Union["DatasetItemEntity", List["DatasetItemEntity"]]


   .. py:method:: __iter__() -> Iterator[otx.api.entities.dataset_item.DatasetItemEntity]

      Return an iterator for the DatasetEntity.

      This iterator is able to iterate over the DatasetEntity lazily.

      :returns: DatasetIterator instance
      :rtype: DatasetIterator


   .. py:method:: with_empty_annotations(annotation_kind: otx.api.entities.annotation.AnnotationSceneKind = AnnotationSceneKind.PREDICTION) -> DatasetEntity

      Produces a new dataset with empty annotation objects (no shapes or labels).

      This is a convenience function to generate a dataset with empty annotations from another dataset.
      This is particularly useful for evaluation on validation data and to build resultsets.

      Assume a dataset containing user annotations.

      >>> labeled_dataset = Dataset()  # user annotated dataset

      Then, we want to see the performance of our task on this labeled_dataset,
      which means we need to create a new dataset to be passed for analysis.

      >>> prediction_dataset = labeled_dataset.with_empty_annotations()

      Later, we can pass this prediction_dataset to the task analysis function.
      By pairing the labeled_dataset and the prediction_dataset, the resultset can then be constructed.
      Refer to `otx.api.entities.resultset.ResultSetEntity` for more info.

      :param annotation_kind: Sets the empty annotation to this kind.
                              Defaults to AnnotationSceneKind.PREDICTION
      :type annotation_kind: AnnotationSceneKind

      :returns: a new dataset containing the same items, with empty annotation objects.
      :rtype: DatasetEntity


   .. py:method:: get_subset(subset: otx.api.entities.subset.Subset) -> DatasetEntity

      Returns a new DatasetEntity with just the dataset items matching the subset.

      This subset is also a DatasetEntity. The dataset items in the subset dataset are the same dataset items as
      in the original dataset.
      Altering one of the objects in the output of this function, will also alter them in the original.

      .. rubric:: Example

      >>> dataset = DatasetEntity()
      >>> training_subset = dataset.get_subset(Subset.TRAINING)

      :param subset: `Subset` to return.
      :type subset: Subset

      :returns: DatasetEntity with items matching subset
      :rtype: DatasetEntity


   .. py:method:: remove(item: otx.api.entities.dataset_item.DatasetItemEntity) -> None

      Remove an item from the items.

      This function calls remove_at_indices function.

      :param item: the item to be deleted.
      :type item: DatasetItemEntity

      :raises ValueError: if the input item is not in the dataset


   .. py:method:: append(item: otx.api.entities.dataset_item.DatasetItemEntity) -> None

      Append a DatasetItemEntity to the dataset.

      .. rubric:: Example

      Appending a dataset item to a dataset

      >>> from otx.api.entities.image import Image
      >>> from otx.api.entities.annotation import NullAnnotationSceneEntity
      >>> from otx.api.entities.dataset_item import DatasetItemEntity
      >>> dataset = DatasetEntity()
      >>> media = Image(file_path='image.jpg')
      >>> annotation = NullAnnotationSceneEntity()
      >>> dataset_item = DatasetItemEntity(media=media, annotation_scene=annotation)
      >>> dataset.append(dataset_item)

      :param item: item to append
      :type item: DatasetItemEntity


   .. py:method:: sort_items() -> None

      Order the dataset items. Does nothing here, but may be overridden in child classes.

      :returns: None


   .. py:method:: remove_at_indices(indices: List[int]) -> None

      Delete items based on the `indices`.

      :param indices: the indices of the items that will be deleted from the items.
      :type indices: List[int]


   .. py:method:: get_labels(include_empty: bool = False) -> List[otx.api.entities.label.LabelEntity]

      Returns the list of all unique labels that are in the dataset.

      Note: This does not respect the ROI of the dataset items.

      :param include_empty: set to True to include empty label (if exists) in the output. Defaults to False.
      :type include_empty: bool

      :returns: list of labels that appear in the dataset
      :rtype: List[LabelEntity]



