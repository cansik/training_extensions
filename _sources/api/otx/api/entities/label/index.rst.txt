:py:mod:`otx.api.entities.label`
================================

.. py:module:: otx.api.entities.label

.. autoapi-nested-parse::

   This module define the label entity.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.entities.label.Domain
   otx.api.entities.label.LabelEntity




.. py:class:: Domain

   Bases: :py:obj:`enum.Enum`

   Describes an algorithm domain like classification, detection, etc.

   .. py:attribute:: NULL
      

      

   .. py:attribute:: CLASSIFICATION
      

      

   .. py:attribute:: DETECTION
      

      

   .. py:attribute:: SEGMENTATION
      

      

   .. py:attribute:: ANOMALY_CLASSIFICATION
      

      

   .. py:attribute:: ANOMALY_DETECTION
      

      

   .. py:attribute:: ANOMALY_SEGMENTATION
      

      

   .. py:attribute:: INSTANCE_SEGMENTATION
      

      

   .. py:attribute:: ROTATED_DETECTION
      

      

   .. py:method:: __str__()

      Returns Domain name.



.. py:class:: LabelEntity(name: str, domain: Domain, color: Optional[otx.api.entities.color.Color] = None, hotkey: str = '', creation_date: Optional[datetime.datetime] = None, is_empty: bool = False, id: Optional[otx.api.entities.id.ID] = None, is_anomalous: bool = False)

   This represents a label. The Label is the object that the user annotates and the tasks predict.

   For example, a label with name "car" can be constructed as follows.

   >>> car = LabelEntity(name="car", domain=Domain.DETECTION)

   .. rubric:: About Empty Label

   In addition to representing the presence of a certain object, the label can also
   be used to represent the absence of objects in the image (or other media types).
   Such a label is referred to as empty label.
   The empty label is constructed as follows:

   >>> empty = LabelEntity(name="empty", domain=Domain.DETECTION, is_empty=True)

   Empty label is used to declare that there is nothing of interest inside this image.
   For example, let's assume a car detection project. During annotation process,
   for positive images (images with cars), the users are asked to annotate the images
   with bounding boxes with car label. However, when the user sees a negative image
   (no car), the user needs to annotate this image with an empty label.

   The empty label is particularly useful to distinguish images with no objects
   of interest from images that have not been annotated, especially in task-chain
   scenario. Let's assume car detection task that is followed with with another
   detection task which detects the driver inside the car. There are two issues here:

   1. The user can (intentionally or unintentionally) miss to annotate
       the driver inside a car.
   2. There is no driver inside the car.

   Without empty label, these two cases cannot be distinguished.
   This is why an empty label is introduced. The empty label makes an explicit
   distinction between missing annotations and "negative" images.

   :param name: the name of the label
   :param domain: the algorithm domain this label is associated to
   :param color: the color of the label (See :class:`Color`)
   :param hotkey: key or combination of keys to select this label in the
                  UI
   :param creation_date: the date time of the label creation
   :param is_empty: set to True if the label is an empty label.
   :param id: the ID of the label. Set to ID() so that a new unique ID
              will be assigned upon saving. If the argument is None, it
              will be set to ID()
   :param is_anomalous: boolean that indicates whether the label is the
                        Anomalous label. Always set to False for non- anomaly
                        projects.

   .. py:method:: name()
      :property:

      Returns the label name.


   .. py:method:: color() -> otx.api.entities.color.Color
      :property:

      Returns the Color object for the label.


   .. py:method:: hotkey() -> str
      :property:

      Returns the hotkey for the label.


   .. py:method:: domain()
      :property:

      Returns the algorithm domain associated to this label.


   .. py:method:: is_empty() -> bool
      :property:

      Returns a boolean indicating if the label is an empty label.


   .. py:method:: creation_date() -> datetime.datetime
      :property:

      Returns the creation date of the label.


   .. py:method:: id_() -> otx.api.entities.id.ID
      :property:

      Returns the label id.


   .. py:method:: id() -> otx.api.entities.id.ID
      :property:

      DEPRECATED.


   .. py:method:: __repr__()

      String representation of the label.


   .. py:method:: __eq__(other)

      Returns True if the two labels are equal.


   .. py:method:: __lt__(other)

      Returns True if self.id < other.id.


   .. py:method:: __gt__(other)

      Returns True if self.id is greater than other.id.


   .. py:method:: __hash__()

      Returns hash of the label.



