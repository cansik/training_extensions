:py:mod:`otx.api.usecases.tasks.interfaces.inference_interface`
===============================================================

.. py:module:: otx.api.usecases.tasks.interfaces.inference_interface

.. autoapi-nested-parse::

   This module contains the interface class for tasks.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.usecases.tasks.interfaces.inference_interface.IInferenceTask
   otx.api.usecases.tasks.interfaces.inference_interface.IRawInference




.. py:class:: IInferenceTask

   A base interface class for a task.

   .. py:method:: infer(dataset: otx.api.entities.datasets.DatasetEntity, inference_parameters: otx.api.entities.inference_parameters.InferenceParameters) -> otx.api.entities.datasets.DatasetEntity
      :abstractmethod:

      This is the method that is called upon inference.

      This happens when the user wants to analyse a sample
      or multiple samples need to be analysed.

      :param dataset: The input dataset to perform the analysis on.
      :param inference_parameters: The parameters to use for the
                                   analysis.

      :returns: The results of the analysis.



.. py:class:: IRawInference

   A base interface class for raw inference tasks.

   .. py:method:: raw_infer(input_tensors: Dict[str, numpy.ndarray], output_tensors: Dict[str, numpy.ndarray])
      :abstractmethod:

      This is the method that is called to run a neural network over a set of tensors.

      This method takes as input/output the tensors which are directly fed to the neural network,
      and does not include any additional pre- and post-processing of the inputs and outputs.

      :param input_tensors: Dictionary containing the input tensors.
      :param output_tensors: Dictionary to be filled by the task with the
                             output tensors.



