:py:mod:`otx.api.usecases.tasks.interfaces.training_interface`
==============================================================

.. py:module:: otx.api.usecases.tasks.interfaces.training_interface

.. autoapi-nested-parse::

   This module contains the interface class for tasks that can perform training.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.usecases.tasks.interfaces.training_interface.ITrainingTask




.. py:class:: ITrainingTask

   A base interface class for tasks which can perform training.

   .. py:method:: save_model(output_model: otx.api.entities.model.ModelEntity)
      :abstractmethod:

      Save the model currently loaded by the task to `output_model`.

      This method is for instance used to save the pre-trained weights before training
      when the task has been initialised with pre-trained weights rather than an existing model.

      :param output_model: Output model where the weights should be stored
      :type output_model: ModelEntity


   .. py:method:: train(dataset: otx.api.entities.datasets.DatasetEntity, output_model: otx.api.entities.model.ModelEntity, train_parameters: otx.api.entities.train_parameters.TrainParameters)
      :abstractmethod:

      Train a new model using the model currently loaded by the task.

      If training was successful, the new model should be used for subsequent calls (e.g. `optimize` or `infer`).

      The new model weights should be saved in the object `output_model`.

      The task has two choices:

       - Set the output model weights, if the task was able to improve itself (according to own measures)
       - Set the model state as failed if it failed to improve itself (according to own measures)

      :param dataset: Dataset containing the training and validation splits to use for training.
      :type dataset: DatasetEntity
      :param output_model: Output model where the weights should be stored
      :type output_model: ModelEntity
      :param train_parameters: Training parameters
      :type train_parameters: TrainParameters


   .. py:method:: cancel_training()
      :abstractmethod:

      Cancels the currently running training process.

      If training is not running, do nothing.



