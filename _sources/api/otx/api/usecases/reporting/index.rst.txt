:py:mod:`otx.api.usecases.reporting`
====================================

.. py:module:: otx.api.usecases.reporting

.. autoapi-nested-parse::

   Training reporting.

   .. automodule:: otx.api.usecases.reporting.callback
      :members:
      :undoc-members:

   .. automodule:: otx.api.usecases.reporting.time_monitor_callback
      :members:
      :undoc-members:



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   callback/index.rst
   time_monitor_callback/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.usecases.reporting.Callback
   otx.api.usecases.reporting.TimeMonitorCallback




.. py:class:: Callback

   Abstract base class used to build new callbacks.

   Properties
       params: dict. Training parameters
           (eg. verbosity, batch size, number of epochs...).
       model: instance of `keras.models.Model`.
           Reference of the model being trained.

   The `logs` dictionary that callback methods
   take as argument will contain keys for quantities relevant to
   the current batch or epoch.

   Currently, the `.fit()` method of the `Sequential` model class
   will include the following quantities in the `logs` that
   it passes to its callbacks:

       on_epoch_end: logs include `acc` and `loss`, and
           optionally include `val_loss`
           (if validation is enabled in `fit`), and `val_acc`
           (if validation and accuracy monitoring are enabled).
       on_batch_begin: logs include `size`,
           the number of samples in the current batch.
       on_batch_end: logs include `loss`, and optionally `acc`
           (if accuracy monitoring is enabled).

   .. py:method:: set_params(params)

      Sets callback parameters.


   .. py:method:: set_model(model)

      Sets callback model.


   .. py:method:: on_epoch_begin(epoch, logs=None)

      It is called on epoch begin event.


   .. py:method:: on_epoch_end(epoch, logs=None)

      It is called on epoch end event.


   .. py:method:: on_batch_begin(batch, logs=None)

      It is called on batch begin event.


   .. py:method:: on_batch_end(batch, logs=None)

      It is called on batch end event.


   .. py:method:: on_train_begin(logs=None)

      It is called on train begin event.


   .. py:method:: on_train_end(logs=None)

      It is called on train end event.


   .. py:method:: on_train_batch_begin(batch, logs)

      It is called on train batch begin event.


   .. py:method:: on_train_batch_end(batch, logs)

      It is called on train batch end event.


   .. py:method:: on_test_begin(logs)

      It is called on test begin event.


   .. py:method:: on_test_end(logs)

      It is called on test end event.


   .. py:method:: on_test_batch_begin(batch, logs)

      It is called on test batch begin event.


   .. py:method:: on_test_batch_end(batch, logs)

      It is called on test batch end event.



.. py:class:: TimeMonitorCallback(num_epoch: int = 0, num_train_steps: int = 0, num_val_steps: int = 0, num_test_steps: int = 0, epoch_history: int = 5, step_history: int = 50, update_progress_callback: Optional[otx.api.entities.train_parameters.UpdateProgressCallback] = None)

   Bases: :py:obj:`otx.api.usecases.reporting.callback.Callback`

   A callback to monitor the progress of training.

   :param num_epoch: Amount of epochs
   :type num_epoch: int
   :param num_train_steps: amount of training steps per epoch
   :type num_train_steps: int
   :param num_val_steps: amount of validation steps per epoch
   :type num_val_steps: int
   :param num_test_steps: amount of testing steps
   :type num_test_steps: int
   :param epoch_history: Amount of previous epochs to calculate average epoch time over
   :type epoch_history: int
   :param step_history: Amount of previous steps to calculate average steps time over
   :type step_history: int
   :param update_progress_callback: Callback to update progress
   :type update_progress_callback: Optional[UpdateProgressCallback]

   .. py:method:: on_train_batch_begin(batch, logs=None)

      Set the value of current step and start the timer.


   .. py:method:: on_train_batch_end(batch, logs=None)

      Compute average time taken to complete a step.


   .. py:method:: is_stalling() -> bool

      Returns True if the training is stalling.

      Returns True if the current step has taken more than 30 seconds and
      at least 20x more than the average step duration


   .. py:method:: __calculate_average_step()

      Compute average duration taken to complete a step.


   .. py:method:: on_test_batch_begin(batch, logs)

      Set the number of current epoch and start the timer.


   .. py:method:: on_test_batch_end(batch, logs)

      Compute average time taken to complete a step based on a running average of `step_history` steps.


   .. py:method:: on_train_begin(logs=None)

      Sets training to true.


   .. py:method:: on_train_end(logs=None)

      Handles early stopping when the total_steps is greater than the current_step.


   .. py:method:: on_epoch_begin(epoch, logs=None)

      Set the number of current epoch and start the timer.


   .. py:method:: on_epoch_end(epoch, logs=None)

      Computes the average time taken to complete an epoch based on a running average of `epoch_history` epochs.


   .. py:method:: _calculate_average_epoch()


   .. py:method:: get_progress()

      Returns current progress as a percentage.



