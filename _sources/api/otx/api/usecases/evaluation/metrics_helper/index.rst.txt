:py:mod:`otx.api.usecases.evaluation.metrics_helper`
====================================================

.. py:module:: otx.api.usecases.evaluation.metrics_helper

.. autoapi-nested-parse::

   Helper functions for computing metrics.

   This module contains the helper functions which can be called directly by algorithm implementers to obtain the metrics.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.usecases.evaluation.metrics_helper.MetricsHelper




.. py:class:: MetricsHelper

   Contains metrics computation functions.

   TODO: subject for refactoring.

   .. py:method:: compute_f_measure(resultset: otx.api.entities.resultset.ResultSetEntity, vary_confidence_threshold: bool = False, vary_nms_threshold: bool = False, cross_class_nms: bool = False) -> otx.api.usecases.evaluation.f_measure.FMeasure
      :staticmethod:

      Compute the F-Measure on a resultset given some parameters.

      :param resultset: The resultset used to compute f-measure
      :param vary_confidence_threshold: Flag specifying whether f-measure
                                        shall be computed for different confidence threshold
                                        values
      :param vary_nms_threshold: Flag specifying whether f-measure shall
                                 be computed for different NMS threshold values
      :param cross_class_nms: Whether non-max suppression should be
                              applied cross-class

      :returns: FMeasure object


   .. py:method:: compute_dice_averaged_over_pixels(resultset: otx.api.entities.resultset.ResultSetEntity, average: otx.api.usecases.evaluation.averaging.MetricAverageMethod = MetricAverageMethod.MACRO) -> otx.api.usecases.evaluation.dice.DiceAverage
      :staticmethod:

      Compute the Dice average on a resultset, averaged over the pixels.

      :param resultset: The resultset used to compute the Dice average
      :param average: The averaging method, either MICRO or MACRO

      :returns: DiceAverage object


   .. py:method:: compute_accuracy(resultset: otx.api.entities.resultset.ResultSetEntity, average: otx.api.usecases.evaluation.averaging.MetricAverageMethod = MetricAverageMethod.MICRO) -> otx.api.usecases.evaluation.accuracy.Accuracy
      :staticmethod:

      Compute the Accuracy on a resultset, averaged over the different label groups.

      :param resultset: The resultset used to compute the accuracy
      :param average: The averaging method, either MICRO or MACRO

      :returns: Accuracy object


   .. py:method:: compute_anomaly_segmentation_scores(resultset: otx.api.entities.resultset.ResultSetEntity) -> otx.api.usecases.evaluation.anomaly_metrics.AnomalySegmentationScores
      :staticmethod:

      Compute the anomaly localization performance metrics on an anomaly segmentation resultset.

      :param resultset: The resultset used to compute the metrics

      :returns: AnomalyLocalizationScores object


   .. py:method:: compute_anomaly_detection_scores(resultset: otx.api.entities.resultset.ResultSetEntity) -> otx.api.usecases.evaluation.anomaly_metrics.AnomalyDetectionScores
      :staticmethod:

      Compute the anomaly localization performance metrics on an anomaly detection resultset.

      :param resultset: The resultset used to compute the metrics

      :returns: AnomalyLocalizationScores object



