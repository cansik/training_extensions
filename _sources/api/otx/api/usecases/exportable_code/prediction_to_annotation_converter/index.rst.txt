:py:mod:`otx.api.usecases.exportable_code.prediction_to_annotation_converter`
=============================================================================

.. py:module:: otx.api.usecases.exportable_code.prediction_to_annotation_converter

.. autoapi-nested-parse::

   Converters for output of inferencers.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.usecases.exportable_code.prediction_to_annotation_converter.IPredictionToAnnotationConverter
   otx.api.usecases.exportable_code.prediction_to_annotation_converter.DetectionToAnnotationConverter
   otx.api.usecases.exportable_code.prediction_to_annotation_converter.DetectionBoxToAnnotationConverter
   otx.api.usecases.exportable_code.prediction_to_annotation_converter.SegmentationToAnnotationConverter
   otx.api.usecases.exportable_code.prediction_to_annotation_converter.ClassificationToAnnotationConverter
   otx.api.usecases.exportable_code.prediction_to_annotation_converter.AnomalyClassificationToAnnotationConverter
   otx.api.usecases.exportable_code.prediction_to_annotation_converter.AnomalySegmentationToAnnotationConverter
   otx.api.usecases.exportable_code.prediction_to_annotation_converter.AnomalyDetectionToAnnotationConverter
   otx.api.usecases.exportable_code.prediction_to_annotation_converter.MaskToAnnotationConverter
   otx.api.usecases.exportable_code.prediction_to_annotation_converter.RotatedRectToAnnotationConverter



Functions
~~~~~~~~~

.. autoapisummary::

   otx.api.usecases.exportable_code.prediction_to_annotation_converter.create_converter



.. py:class:: IPredictionToAnnotationConverter

   Interface for converter.

   .. py:method:: convert_to_annotation(predictions: Any, metadata: Dict) -> otx.api.entities.annotation.AnnotationSceneEntity
      :abstractmethod:

      Convert raw predictions to AnnotationScene format.

      :param predictions: raw predictions from inferencer
      :type predictions: Any
      :param metadata: metadata from inferencer
      :type metadata: Dict

      :returns: annotation object containing the shapes obtained from the raw predictions.
      :rtype: AnnotationSceneEntity



.. py:class:: DetectionToAnnotationConverter(labels: List[otx.api.entities.label.LabelEntity])

   Bases: :py:obj:`IPredictionToAnnotationConverter`

   Converts Object Detections to Annotations.

   :param labels: list of labels
   :type labels: List[LabelEntity]

   .. py:method:: convert_to_annotation(predictions: numpy.ndarray, metadata: Optional[Dict] = None) -> otx.api.entities.annotation.AnnotationSceneEntity

      Converts a set of predictions into an AnnotationScene object.

      :param predictions:
                          Prediction with shape [num_predictions, 6] or
                                      [num_predictions, 7]
                          Supported detection formats are

                          * [label, confidence, x1, y1, x2, y2]
                          * [_, label, confidence, x1, y1, x2, y2]

                          .. note::
                          `label` can be any integer that can be mapped to `self.labels`
                          `confidence` should be a value between 0 and 1
                          `x1`, `x2`, `y1` and `y2` are expected to be normalized.
      :type predictions: np.ndarray
      :param metadata: (Unused)
      :type metadata: Optional[Dict]

      :returns: AnnotationScene Object containing the boxes obtained from the prediction.
      :rtype: AnnotationScene


   .. py:method:: __convert_to_annotations(predictions: numpy.ndarray) -> List[otx.api.entities.annotation.Annotation]

      Converts a list of Detections to OTX Annotation objects.

      :param predictions: A list of predictions with shape [num_prediction, 6] or
                          [num_predictions, 7]
      :type predictions: np.ndarray

      :returns: A list of Annotation objects with Rectangle shapes
      :rtype: List[Annotation]

      :raises ValueError: This error is raised if the shape of prediction is not
          (n, 7) or (n, 6)



.. py:function:: create_converter(converter_type: otx.api.entities.label.Domain, labels: otx.api.entities.label_schema.LabelSchemaEntity) -> IPredictionToAnnotationConverter

   Simple factory for converters based on type of tasks.

   :param converter_type: type of converter
   :type converter_type: Domain
   :param labels: label schema entity
   :type labels: LabelSchemaEntity


.. py:class:: DetectionBoxToAnnotationConverter(labels: otx.api.entities.label_schema.LabelSchemaEntity)

   Bases: :py:obj:`IPredictionToAnnotationConverter`

   Converts DetectionBox Predictions ModelAPI to Annotations.

   :param labels: Label Schema containing the label info of the task
   :type labels: LabelSchemaEntity

   .. py:method:: convert_to_annotation(predictions: List[openvino.model_zoo.model_api.models.utils.Detection], metadata: Dict[str, Any]) -> otx.api.entities.annotation.AnnotationSceneEntity

      Convert predictions to OTX Annotation Scene using the metadata.

      :param predictions: Raw predictions from the model.
      :type predictions: tuple
      :param metadata: Variable containing metadata information.
      :type metadata: Dict[str, Any]

      :returns: OTX annotation scene entity object.
      :rtype: AnnotationSceneEntity



.. py:class:: SegmentationToAnnotationConverter(label_schema: otx.api.entities.label_schema.LabelSchemaEntity)

   Bases: :py:obj:`IPredictionToAnnotationConverter`

   Converts Segmentation Predictions ModelAPI to Annotations.

   :param labels: Label Schema containing the label info of the task
   :type labels: LabelSchemaEntity

   .. py:method:: convert_to_annotation(predictions: numpy.ndarray, metadata: Dict[str, Any]) -> otx.api.entities.annotation.AnnotationSceneEntity

      Convert predictions to OTX Annotation Scene using the metadata.

      :param predictions: Raw predictions from the model.
      :type predictions: tuple
      :param metadata: Variable containing metadata information.
      :type metadata: Dict[str, Any]

      :returns: OTX annotation scene entity object.
      :rtype: AnnotationSceneEntity



.. py:class:: ClassificationToAnnotationConverter(label_schema: otx.api.entities.label_schema.LabelSchemaEntity)

   Bases: :py:obj:`IPredictionToAnnotationConverter`

   Converts Classification Predictions ModelAPI to Annotations.

   :param labels: Label Schema containing the label info of the task
   :type labels: LabelSchemaEntity

   .. py:method:: convert_to_annotation(predictions: List[Tuple[int, float]], metadata: Optional[Dict] = None) -> otx.api.entities.annotation.AnnotationSceneEntity

      Convert predictions to OTX Annotation Scene using the metadata.

      :param predictions: Raw predictions from the model.
      :type predictions: tuple
      :param metadata: Variable containing metadata information.
      :type metadata: Dict[str, Any]

      :returns: OTX annotation scene entity object.
      :rtype: AnnotationSceneEntity



.. py:class:: AnomalyClassificationToAnnotationConverter(label_schema: otx.api.entities.label_schema.LabelSchemaEntity)

   Bases: :py:obj:`IPredictionToAnnotationConverter`

   Converts AnomalyClassification Predictions ModelAPI to Annotations.

   :param labels: Label Schema containing the label info of the task
   :type labels: LabelSchemaEntity

   .. py:method:: convert_to_annotation(predictions: numpy.ndarray, metadata: Dict[str, Any]) -> otx.api.entities.annotation.AnnotationSceneEntity

      Convert predictions to OTX Annotation Scene using the metadata.

      :param predictions: Raw predictions from the model.
      :type predictions: tuple
      :param metadata: Variable containing metadata information.
      :type metadata: Dict[str, Any]

      :returns: OTX annotation scene entity object.
      :rtype: AnnotationSceneEntity



.. py:class:: AnomalySegmentationToAnnotationConverter(label_schema: otx.api.entities.label_schema.LabelSchemaEntity)

   Bases: :py:obj:`IPredictionToAnnotationConverter`

   Converts AnomalyClassification Predictions ModelAPI to Annotations.

   :param labels: Label Schema containing the label info of the task
   :type labels: LabelSchemaEntity

   .. py:method:: convert_to_annotation(predictions: numpy.ndarray, metadata: Dict[str, Any]) -> otx.api.entities.annotation.AnnotationSceneEntity

      Convert predictions to OTX Annotation Scene using the metadata.

      :param predictions: Raw predictions from the model.
      :type predictions: tuple
      :param metadata: Variable containing metadata information.
      :type metadata: Dict[str, Any]

      :returns: OTX annotation scene entity object.
      :rtype: AnnotationSceneEntity



.. py:class:: AnomalyDetectionToAnnotationConverter(label_schema: otx.api.entities.label_schema.LabelSchemaEntity)

   Bases: :py:obj:`IPredictionToAnnotationConverter`

   Converts Anomaly Detection Predictions ModelAPI to Annotations.

   :param labels: Label Schema containing the label info of the task
   :type labels: LabelSchemaEntity

   .. py:method:: convert_to_annotation(predictions: numpy.ndarray, metadata: Dict[str, Any]) -> otx.api.entities.annotation.AnnotationSceneEntity

      Convert predictions to OTX Annotation Scene using the metadata.

      :param predictions: Raw predictions from the model.
      :type predictions: tuple
      :param metadata: Variable containing metadata information.
      :type metadata: Dict[str, Any]

      :returns: OTX annotation scene entity object.
      :rtype: AnnotationSceneEntity



.. py:class:: MaskToAnnotationConverter(labels: otx.api.entities.label_schema.LabelSchemaEntity)

   Bases: :py:obj:`IPredictionToAnnotationConverter`

   Converts DetectionBox Predictions ModelAPI to Annotations.

   .. py:method:: convert_to_annotation(predictions: tuple, metadata: Dict[str, Any]) -> otx.api.entities.annotation.AnnotationSceneEntity

      Convert predictions to OTX Annotation Scene using the metadata.

      :param predictions: Raw predictions from the model.
      :type predictions: tuple
      :param metadata: Variable containing metadata information.
      :type metadata: Dict[str, Any]

      :returns: OTX annotation scene entity object.
      :rtype: AnnotationSceneEntity



.. py:class:: RotatedRectToAnnotationConverter(labels: otx.api.entities.label_schema.LabelSchemaEntity)

   Bases: :py:obj:`IPredictionToAnnotationConverter`

   Converts Rotated Rect (mask) Predictions ModelAPI to Annotations.

   :param labels: Label Schema containing the label info of the task
   :type labels: LabelSchemaEntity

   .. py:method:: convert_to_annotation(predictions: tuple, metadata: Dict[str, Any]) -> otx.api.entities.annotation.AnnotationSceneEntity

      Convert predictions to OTX Annotation Scene using the metadata.

      :param predictions: Raw predictions from the model.
      :type predictions: tuple
      :param metadata: Variable containing metadata information.
      :type metadata: Dict[str, Any]

      :returns: OTX annotation scene entity object.
      :rtype: AnnotationSceneEntity



