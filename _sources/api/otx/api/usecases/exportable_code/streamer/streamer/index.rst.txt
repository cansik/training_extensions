:py:mod:`otx.api.usecases.exportable_code.streamer.streamer`
============================================================

.. py:module:: otx.api.usecases.exportable_code.streamer.streamer

.. autoapi-nested-parse::

   Streamer for reading input.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.usecases.exportable_code.streamer.streamer.MediaType
   otx.api.usecases.exportable_code.streamer.streamer.BaseStreamer
   otx.api.usecases.exportable_code.streamer.streamer.ThreadedStreamer
   otx.api.usecases.exportable_code.streamer.streamer.VideoStreamer
   otx.api.usecases.exportable_code.streamer.streamer.CameraStreamer
   otx.api.usecases.exportable_code.streamer.streamer.ImageStreamer
   otx.api.usecases.exportable_code.streamer.streamer.DirStreamer



Functions
~~~~~~~~~

.. autoapisummary::

   otx.api.usecases.exportable_code.streamer.streamer._process_run
   otx.api.usecases.exportable_code.streamer.streamer.get_streamer



.. py:exception:: InvalidInput(message: str)

   Bases: :py:obj:`Exception`

   Exception for wrong input format.


.. py:exception:: OpenError(message: str)

   Bases: :py:obj:`Exception`

   Exception for error opening reader.


.. py:class:: MediaType

   Bases: :py:obj:`enum.Enum`

   This Enum represents the types of input.

   .. py:attribute:: IMAGE
      :annotation: = 1

      

   .. py:attribute:: DIR
      :annotation: = 2

      

   .. py:attribute:: VIDEO
      :annotation: = 3

      

   .. py:attribute:: CAMERA
      :annotation: = 4

      


.. py:class:: BaseStreamer

   Base Streamer interface to implement Image, Video and Camera streamers.

   .. py:method:: __iter__() -> Iterator[numpy.ndarray]
      :abstractmethod:

      Iterate through the streamer object that is a Python Generator object.

      :returns: Yield the image or video frame.
      :rtype: np.ndarray


   .. py:method:: get_type() -> MediaType
      :abstractmethod:

      Get type of streamer.

      :returns: type of streamer.
      :rtype: MediaType



.. py:function:: _process_run(streamer: BaseStreamer, buffer: multiprocessing.Queue) -> None

   Private function that is run by the thread.

   Waits for the buffer to gain space for timeout seconds while it is full.
   If no space was available within this time the function will exit

   streamer (BaseStreamer): The streamer to retrieve frames from
   buffer (multiprocessing.Queue): The buffer to place the retrieved frames in


.. py:class:: ThreadedStreamer(streamer: BaseStreamer, buffer_size: int = 2)

   Bases: :py:obj:`BaseStreamer`

   Runs a BaseStreamer on a separate thread.

   streamer (BaseStreamer): The streamer to run on a thread
   buffer_size (int): Number of frame to buffer internally. Defaults to 2.

   .. rubric:: Example

   >>> streamer = VideoStreamer(path="../demo.mp4")
   >>> threaded_streamer = ThreadedStreamer(streamer)
   >>> for frame in threaded_streamer:
   ...    pass

   .. py:method:: __iter__() -> Iterator[numpy.ndarray]

      Get frames from streamer and yield them.

      :Yields: *Iterator[np.ndarray]* -- Yield the image or video frame.


   .. py:method:: get_type() -> MediaType

      Get type of internal streamer.

      :returns: type of internal streamer.
      :rtype: MediaType



.. py:class:: VideoStreamer(input_path: str, loop: bool = False)

   Bases: :py:obj:`BaseStreamer`

   Video Streamer.

   :param path: Path to the video file.

   .. rubric:: Example

   >>> streamer = VideoStreamer(path="../demo.mp4")
   ... for frame in streamer:
   ...    pass

   .. py:method:: __iter__() -> Iterator[numpy.ndarray]

      Iterates over frames of the video.

      If self.loop is set to True, the video will loop infinitely.


   .. py:method:: get_type() -> MediaType

      Returns the type of media.



.. py:class:: CameraStreamer(camera_device: int = 0)

   Bases: :py:obj:`BaseStreamer`

   Stream video frames from camera.

   :param camera_device: Camera device index e.g, 0, 1
   :type camera_device: int

   .. rubric:: Example

   >>> streamer = CameraStreamer(camera_device=0)
   ... for frame in streamer:
   ...     cv2.imshow("Window", frame)
   ...     if ord("q") == cv2.waitKey(1):
   ...         break

   .. py:method:: __iter__() -> Iterator[numpy.ndarray]

      Read video and yield the frame.

      :param stream: Video stream captured via OpenCV's VideoCapture

      :returns: Individual frame


   .. py:method:: get_type() -> MediaType

      Returns the type of media.



.. py:class:: ImageStreamer(input_path: str, loop: bool = False)

   Bases: :py:obj:`BaseStreamer`

   Stream from image file.

   :param input_path: Path to an image.
   :type input_path: str
   :param loop: Whether to loop through the image or not. Defaults to False.
   :type loop: bool

   .. rubric:: Example

   >>> streamer = ImageStreamer(path="../images")
   ... for frame in streamer:
   ...     cv2.imshow("Window", frame)
   ...     cv2.waitKey(0)

   .. py:method:: __iter__() -> Iterator[numpy.ndarray]

      If loop is True, yield the image again and again.


   .. py:method:: get_type() -> MediaType

      Returns the type of the streamer.



.. py:class:: DirStreamer(input_path: str, loop: bool = False)

   Bases: :py:obj:`BaseStreamer`

   Stream from directory of images.

   :param path: Path to directory.

   .. rubric:: Example

   >>> streamer = DirStreamer(path="../images")
   ... for frame in streamer:
   ...     cv2.imshow("Window", frame)
   ...     cv2.waitKey(0)

   .. py:method:: __iter__() -> Iterator[numpy.ndarray]

      Iterates over the images in a directory.

      If self.loop is True, it reiterates again from the first image in the directory.


   .. py:method:: get_type() -> MediaType

      Returns the type of the streamer.



.. py:function:: get_streamer(input_stream: Union[int, str] = 0, loop: bool = False, threaded: bool = False) -> BaseStreamer

   Get streamer object based on the file path or camera device index provided.

   :param input_stream: Path to file or directory or index for camera.
   :type input_stream: Union[int, str]
   :param loop: Enable reading the input in a loop. Defaults to False.
   :type loop: bool
   :param threaded: Run streaming on a separate thread. Threaded streaming option. Defaults to False.
   :type threaded: bool

   :returns: Streamer object.
   :rtype: BaseStreamer


