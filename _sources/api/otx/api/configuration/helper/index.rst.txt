:py:mod:`otx.api.configuration.helper`
======================================

.. py:module:: otx.api.configuration.helper

.. autoapi-nested-parse::

   This module contains the configuration helper functions.

   These can be used to create, convert or interact with OTX configuration objects or dictionaries, yaml strings or yaml
   files representing those objects.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   config_element_mapping/index.rst
   convert/index.rst
   create/index.rst
   substitute/index.rst
   utils/index.rst
   validate/index.rst


Package Contents
----------------


Functions
~~~~~~~~~

.. autoapisummary::

   otx.api.configuration.helper.convert
   otx.api.configuration.helper.create
   otx.api.configuration.helper.substitute_values
   otx.api.configuration.helper.substitute_values_for_lifecycle
   otx.api.configuration.helper.validate



.. py:function:: convert(config: otx.api.configuration.configurable_parameters.ConfigurableParameters, target: Type[ConvertTypeVar], enum_to_str: bool = False, id_to_str: bool = False, values_only: bool = False) -> ConvertTypeVar

   Convert a configuration object to either a yaml string, a dictionary or an OmegaConf DictConfig object.

   :param config: ConfigurableParameters object to convert
   :type config: ConfigurableParameters
   :param target: target type to convert to. Options are [str, dict, DictConfig]
   :type target: Type[ConvertTypeVar]
   :param enum_to_str: Boolean specifying whether to convert enums within the config
                       to their string representation. For conversion to yaml, enums
                       are automatically converted and this option is disregarded.
   :type enum_to_str: bool
   :param id_to_str: True to convert the id of the configurable parameters to a string
                     representation, False to leave it as an ID object
   :type id_to_str: bool
   :param values_only: True to keep only the parameter values, and remove all meta
                       data from the target output
   :type values_only: bool

   :raises ValueError: if an unsupported conversion target is supplied

   :returns:

             Result of the conversion, the configuration specified in `config` in the
                 representation specified in `target`
   :rtype: ConvertTypeVar


.. py:function:: create(input_config: Union[str, omegaconf.DictConfig, dict]) -> otx.api.configuration.configurable_parameters.ConfigurableParameters

   Create a configuration object from a yaml string, yaml file path, dictionary or OmegaConf DictConfig object.

   :param input_config: yaml string, dictionary, DictConfig or filepath
                        describing a configuration.

   :returns: ConfigurableParameters object


.. py:function:: substitute_values(config: otx.api.configuration.configurable_parameters.ConfigurableParameters, value_input: Union[str, omegaconf.DictConfig, dict, otx.api.configuration.configurable_parameters.ConfigurableParameters], allow_missing_values: bool = False)

   Substitutes values from value_input into the config object.

   The structures of value_input and config have to match in order for the values to be substituted
   correctly.

   Values are substituted in place.

   :param config: ConfigurableParameter object to substitute values into.
   :type config: ConfigurableParameters
   :param value_input: ConfigurableParameters (either in object,
                       dict, yaml or DictConfig representation) to take the values to be substituted from.
   :type value_input: Union[str, DictConfig, dict, ConfigurableParameters]
   :param allow_missing_values: True to allow missing values in the configuration,
                                i.e. if a value is found in `value_input`, but not in `config`, it will
                                silently be ignored. If set to False, an AttributeError will be
                                raised. Defaults to False.
   :type allow_missing_values: bool


.. py:function:: substitute_values_for_lifecycle(config: otx.api.configuration.configurable_parameters.ConfigurableParameters, value_input: otx.api.configuration.configurable_parameters.ConfigurableParameters, model_lifecycle: Union[otx.api.configuration.enums.ModelLifecycle, Sequence[otx.api.configuration.enums.ModelLifecycle]], allow_missing_values: bool = True)

   Substitutes values from value_input into the config object.

   The structures of value_input and config have to match in order for the values to be substituted correctly.
   If the argument `model_lifecycle` is provided, only parameters that affect the specified phase in the model
   lifecycle will be substituted.

   Values are substituted in place.

   :param config: ConfigurableParameter object to substitute values into
   :type config: ConfigurableParameters
   :param value_input: ConfigurableParameters to take the values to be substituted
                       from.
   :type value_input: ConfigurableParameters
   :param model_lifecycle: Phase or list of phases in the
                           model lifecycle to carry out the substitution for. For example, if
                           `model_lifecycle = ModelLifecycle.INFERENCE` is passed, only parameters that
                           affect inference will be updated, and the rest of the parameters will
                           remain untouched.
   :type model_lifecycle: Union[ModelLifecycle, Sequence[ModelLifecycle]]
   :param allow_missing_values: True to allow missing values in the configuration,
                                i.e. if a value is found in `value_input`, but not in `config`, it will
                                silently be ignored. If set to False, an AttributeError will be
                                raised. Defaults to True.
   :type allow_missing_values: bool


.. py:function:: validate(config: otx.api.configuration.elements.ParameterGroup) -> bool

   Validate a configuration object.

   :param config: Configuration to validate

   :returns: True if config is valid


