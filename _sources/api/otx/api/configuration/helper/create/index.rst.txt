:py:mod:`otx.api.configuration.helper.create`
=============================================

.. py:module:: otx.api.configuration.helper.create

.. autoapi-nested-parse::

   This module contains the definition for the `create` function within the configuration helper.

   This function can be used to create a OTX configuration object from a dictionary or yaml representation.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   otx.api.configuration.helper.create.construct_attrib_from_dict
   otx.api.configuration.helper.create.construct_ui_rules_from_dict
   otx.api.configuration.helper.create.create_default_configurable_enum_from_dict
   otx.api.configuration.helper.create.gather_parameter_arguments_and_values_from_dict
   otx.api.configuration.helper.create.create_parameter_group
   otx.api.configuration.helper.create.create_nested_parameter_group
   otx.api.configuration.helper.create.contains_parameter_groups
   otx.api.configuration.helper.create.from_dict_attr
   otx.api.configuration.helper.create.create



Attributes
~~~~~~~~~~

.. autoapisummary::

   otx.api.configuration.helper.create.ParameterGroupTypeVar
   otx.api.configuration.helper.create.ExposureTypeVar
   otx.api.configuration.helper.create.METADATA_ENUMS


.. py:data:: ParameterGroupTypeVar
   

   

.. py:data:: ExposureTypeVar
   

   

.. py:data:: METADATA_ENUMS
   

   

.. py:function:: construct_attrib_from_dict(dict_object: Union[dict, omegaconf.DictConfig]) -> ExposureTypeVar

   Constructs a ui exposure element from an input dictionary or DictConfig.

   Elements are mapped according to the 'type' field in the input dict.

   :param dict_object: Dictionary containing the arguments for the element constructor.
   :type dict_object: Union[dict, DictConfig]

   :returns: Rule or UIRules element, constructed according to the input dict_object.
   :rtype: ExposureTypeVar


.. py:function:: construct_ui_rules_from_dict(ui_exposure_settings: Union[dict, omegaconf.DictConfig]) -> otx.api.configuration.ui_rules.rules.UIRules

   Takes a dictionary representation of ui exposure logic and constructs an UIRules element out of this.

   :param ui_exposure_settings: dictionary representing the logic to govern exposure of a parameter in the UI

   :returns: Exposure element constructed according to the settings passed in ui_exposure_settings


.. py:function:: create_default_configurable_enum_from_dict(parameter_dict: Union[dict, omegaconf.DictConfig]) -> dict

   Create a default configurable enum from a dictionary.

   Takes a parameter_dict representing a configurable Enum and consumes the ENUM_NAME, OPTIONS and DEFAULT_VALUE
   metadata.

   From this, a new subclass of ConfigurableEnum is constructed. The DEFAULT_VALUE of the parameter_dict is updated
   with the appropriate ConfigurableEnum instance.

   :param parameter_dict: Dictionary representation of an enum_selectable parameter. Can be either serialized or not.

   :returns: parameter_dict containing the default_value instantiated as a ConfigurableEnum


.. py:function:: gather_parameter_arguments_and_values_from_dict(config_dict_section: Union[dict, omegaconf.DictConfig]) -> dict

   Collect arguments needed to construct attrs class out of a config dict section representing a parameter group.

   Parameters living in the group are constructed in this function as well.

   This function returns a dictionary that contains the keys `make_arguments`, `call_arguments` and `values`.
   make_arguments are the arguments that should be passed to attr.make_class to dynamically generate a class
       constructor
   call_arguments are the arguments that should be passed in the initialization call to the constructor
   values are the parameter values, that can be set once the instance of the parameter group is created.

   :param config_dict_section: Dictionary representation of a parameter
                               group in a configuration, for which to gather the
                               constructor arguments

   :returns: dictionary containing the make_arguments, call_arguments and
             values parsed from the config_dict_section


.. py:function:: create_parameter_group(config_dict_section: Union[dict, omegaconf.DictConfig]) -> ParameterGroupTypeVar

   Creates a parameter group object out of a config_dict_section.

   config_dict_section is a dictionary or DictConfig representing a parameter group.
   This method should only be used for simple groups, i.e. parameter groups not containing any other parameter groups.
   For nested groups, the function 'create_nested_parameter_group' should be used instead.

   :param config_dict_section: Dictionary representation of the parameter
                               group to construct

   :returns: ParameterGroup or ConfigurableParameters object constructed
             according to config_dict_section


.. py:function:: create_nested_parameter_group(config_dict_section: Union[dict, omegaconf.DictConfig]) -> otx.api.configuration.elements.ParameterGroup

   Creates a parameter group object out of a config_dict_section.

   config_dict_section is a dictionary or DictConfig representing a parameter group. This method should be used for
   nested groups, and uses recursion to reconstruct those.

   :param config_dict_section: Dictionary representation of the parameter group to construct

   :returns: ParameterGroup or Configuration object constructed according to config_dict_section


.. py:function:: contains_parameter_groups(config_dict: Union[dict, omegaconf.DictConfig]) -> List[str]

   Checks whether a configuration or configuration section specified in `config_dict` contains parameter groups.

   Returns a list of the group names if it does, and an empty list otherwise

   :param config_dict: Dictionary or DictConfig representing a configuration or configuration section.

   :returns: List of names of parameter groups that are defined in the config_dict, if any. Empty list otherwise.


.. py:function:: from_dict_attr(config_dict: Union[dict, omegaconf.DictConfig]) -> otx.api.configuration.configurable_parameters.ConfigurableParameters

   Creates a configuration object from an input config_dict.

   Uses recursion to handle nested parameter groups in the config

   :param config_dict: Dictionary representation of a TaskConfig,
                       ProjectConfig or ComponentConfig
   :type config_dict: Union[dict, DictConfig]

   :returns: ParameterGroup object constructed according to config_dict
   :rtype: ConfigurableParameters


.. py:function:: create(input_config: Union[str, omegaconf.DictConfig, dict]) -> otx.api.configuration.configurable_parameters.ConfigurableParameters

   Create a configuration object from a yaml string, yaml file path, dictionary or OmegaConf DictConfig object.

   :param input_config: yaml string, dictionary, DictConfig or filepath
                        describing a configuration.

   :returns: ConfigurableParameters object


