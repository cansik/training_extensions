:py:mod:`otx.api.configuration.elements`
========================================

.. py:module:: otx.api.configuration.elements

.. autoapi-nested-parse::

   This module contains all elements needed to construct a OTX configuration object.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   configurable_enum/index.rst
   metadata_keys/index.rst
   parameter_group/index.rst
   primitive_parameters/index.rst
   utils/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.configuration.elements.ConfigurableEnum
   otx.api.configuration.elements.ParameterGroup



Functions
~~~~~~~~~

.. autoapisummary::

   otx.api.configuration.elements.add_parameter_group
   otx.api.configuration.elements.boolean_attribute
   otx.api.configuration.elements.configurable_boolean
   otx.api.configuration.elements.configurable_float
   otx.api.configuration.elements.configurable_integer
   otx.api.configuration.elements.float_selectable
   otx.api.configuration.elements.selectable
   otx.api.configuration.elements.string_attribute



.. py:class:: ConfigurableEnum

   Bases: :py:obj:`enum.Enum`

   This class is used as the basis for defining `selectable` configurable parameters in the OTX API.

   Enums reflecting `selectable` options should inherit from thisclass.

   .. py:method:: __str__()

      Retrieves the string representation of an instance of the ConfigurableEnum (or subclasses thereof).


   .. py:method:: __eq__(other) -> bool

      Returns True if the ConfigurableEnum instance is equal to the other ConfigurableEnum instance.

      Checks whether one ConfigurableEnum instance (or instance of a subclass thereof) is equal to the `other`
      object. Comparison is made based on class name, instance value and instance name.

      :returns: True if the two instances are equal, False otherwise.
      :rtype: bool


   .. py:method:: __hash__()

      Computes hash for the ConfigurableEnum instance.


   .. py:method:: get_class_info() -> dict
      :classmethod:

      Creates a dictionary representation of the ConfigurableEnum.

      This includes the name of the enum and the (name, value) pairs representing its members.

      :returns: Dictionary representation of the ConfigurableEnum.
      :rtype: dict


   .. py:method:: get_names() -> List[str]
      :classmethod:

      Returns a list of names that can be used to index the Enum.


   .. py:method:: get_values() -> List[str]
      :classmethod:

      Returns a list of values that can be used to index the Enum.



.. py:class:: ParameterGroup

   A group of configuration elements.

   Parameters living within the parameter group are typed attrs Attributes. The schema for each parameter is defined
   in its metadata, which can be retrieved using the `get_metadata` method from the parent ParameterGroup instance.

   .. attribute:: header

      User friendly name for the parameter group, that will be
      displayed in the UI

      :type: str

   .. attribute:: description

      User friendly string describing what the parameter
      group represents, that will be displayed in the UI.

      :type: str

   .. attribute:: visible_in_ui

      Boolean that controls whether or not this
      parameter group will be exposed through the REST API and
      shown in the UI. Set to False to hide this group. Defaults
      to True

      :type: bool

   .. py:attribute:: header
      :annotation: :str

      

   .. py:attribute:: description
      :annotation: :str

      

   .. py:attribute:: visible_in_ui
      :annotation: :bool

      

   .. py:attribute:: type
      :annotation: :otx.api.configuration.enums.config_element_type.ConfigElementType

      

   .. py:method:: __attrs_post_init__()

      Update parameter and group after __init__.

      This method is called after the __init__ method to update the parameter and group fields of the ParameterGroup
      instance.


   .. py:method:: get_metadata(parameter_name: str) -> dict

      Retrieve the metadata for a particular parameter from the group.

      :param parameter_name: name of the parameter for which to get the
                             metadata
      :type parameter_name: str

      :returns:

                dictionary containing the metadata for the requested
                    parameter. Returns an empty dict if no metadata was found
                    for the parameter, or if the parameter was not found in the
                    group.
      :rtype: dict


   .. py:method:: set_metadata_value(parameter_name: str, metadata_key: str, value: Union[int, float, str, bool, enum.Enum]) -> bool

      Sets the value of a specific metadata item `metadata_key` for the parameter named `parameter_name`.

      :param parameter_name: name of the parameter for which to get the
                             metadata item
      :type parameter_name: str
      :param metadata_key: name of the metadata value to set
      :type metadata_key: str
      :param value: New value to assign to the metadata item accessed by
                    `metadata_key`. The type of `value` has to exactly match
                    the type of the current value of the metadata item
      :type value: Union[int, float, str, bool, Enum]

      :returns: True if the metadata item was successfully updated, False
                otherwise


   .. py:method:: update_auto_hpo_states()

      Update hpo state based on teh value of parameters.

      Updates the `auto_hpo_state` metadata field for all parameters in the parameter
      group, based on the values of the parameters and the values of their
      `auto_hpo_value` metadata fields.


   .. py:method:: __eq__(other)

      Comparison with support for dynamically generated ParameterGroups.

      Override default implementation of __eq__ to enable comparison of
      ParameterGroups generated dynamically via the config helper.



.. py:function:: add_parameter_group(group: Type[_ParameterGroup]) -> _ParameterGroup

   Wrapper to attr.ib to add nested parameter groups to a configuration.


.. py:function:: boolean_attribute(value: bool) -> bool

   Boolean attribute wrapper.

   Wrapper for attr.ib that can be used to overwrite simple boolean attributes in a class or parameter group
   definition.

   :param value: boolean to be added as attribute

   :returns: attr.ib boolean attribute with its default value set to value


.. py:function:: configurable_boolean(default_value: bool, header: str, description: str = 'Default configurable boolean description', warning: str = None, editable: bool = True, visible_in_ui: bool = True, affects_outcome_of: otx.api.configuration.enums.ModelLifecycle = ModelLifecycle.NONE, ui_rules: otx.api.configuration.ui_rules.UIRules = NullUIRules(), auto_hpo_state: otx.api.configuration.enums.AutoHPOState = AutoHPOState.NOT_POSSIBLE, auto_hpo_value: Optional[bool] = None) -> bool

   Constructs a configurable boolean attribute, with the appropriate metadata.

   :param default_value: boolean to use as default for the parameter
   :param header: User friendly name for the parameter, which will be
                  shown in the UI
   :param description: A user friendly description of what this parameter
                       does, what does it represent and what are the effects of
                       changing it?
   :param warning: An optional warning message to caution users when
                   changing this parameter. This message will be displayed in
                   the UI. For example, for the parameter batch_size:
                   `Increasing batch size increases GPU memory demands and may
                   result in out of memory errors. Please update batch size
                   with caution.`
   :param editable: Set to False to prevent the parameter from being
                    edited in the UI. It can still be edited through the REST
                    API or the SDK. Defaults to True
   :param visible_in_ui: Set to False to hide the parameter from the UI
                         and the REST API. It will still be visible through the SDK.
                         Defaults to True
   :param affects_outcome_of: Describes the stage of the ModelLifecycle in
                              which this parameter modifies the outcome. See the
                              documentation for the ModelLifecycle Enum for further
                              details
   :param ui_rules: Set of rules to control UI behavior for this
                    parameter. For example, the parameter can be shown or hidden
                    from the UI based on the value of other parameters in the
                    configuration. Have a look at the UIRules class for more
                    details. Defaults to NullUIRules.
   :param auto_hpo_state: This flag reflects whether the parameter can be
                          (or has been) optimized through automatic hyper parameter
                          tuning (auto-HPO)
   :param auto_hpo_value: If auto-HPO has been executed for this
                          parameter, this field will hold the optimized value for the
                          configurable boolean

   :returns: attrs Attribute of type `bool`, with its metadata set according
             to the inputs


.. py:function:: configurable_float(default_value: float, header: str, min_value: float = 0.0, max_value: float = 255.0, description: str = 'Default float description', warning: str = None, editable: bool = True, visible_in_ui: bool = True, affects_outcome_of: otx.api.configuration.enums.ModelLifecycle = ModelLifecycle.NONE, ui_rules: otx.api.configuration.ui_rules.UIRules = NullUIRules(), auto_hpo_state: otx.api.configuration.enums.AutoHPOState = AutoHPOState.NOT_POSSIBLE, auto_hpo_value: Optional[float] = None) -> float

   Constructs a configurable float attribute, with the appropriate metadata.

   :param default_value: float to use as default for the parameter
   :param header: User friendly name for the parameter, which will be
                  shown in the UI
   :param min_value: lower bound of the range of values this parameter can
                     take. Defaults to 0.0
   :param max_value: upper bound of the range of values this parameter can
                     take Defaults to 255.0
   :param description: A user friendly description of what this parameter
                       does, what does it represent and what are the effects of
                       changing it?
   :param warning: An optional warning message to caution users when
                   changing this parameter. This message will be displayed in
                   the UI. For example, for the parameter batch_size:
                   `Increasing batch size increases GPU memory demands and may
                   result in out of memory errors. Please update batch size
                   with caution.`
   :param editable: Set to False to prevent the parameter from being
                    edited in the UI. It can still be edited through the REST
                    API or the SDK. Defaults to True
   :param visible_in_ui: Set to False to hide the parameter from the UI
                         and the REST API. It will still be visible through the SDK.
                         Defaults to True
   :param affects_outcome_of: Describes the stage of the ModelLifecycle in
                              which this parameter modifies the outcome. See the
                              documentation for the ModelLifecycle Enum for further
                              details
   :param ui_rules: Set of rules to control UI behavior for this
                    parameter. For example, the parameter can be shown or hidden
                    from the UI based on the value of other parameters in the
                    configuration. Have a look at the UIRules class for more
                    details. Defaults to NullUIRules.
   :param auto_hpo_state: This flag reflects whether the parameter can be
                          (or has been) optimized through automatic hyper parameter
                          tuning (auto-HPO)
   :param auto_hpo_value: If auto-HPO has been executed for this
                          parameter, this field will hold the optimized value for the
                          configurable float

   :returns: attrs Attribute of type `float`, with its metadata set according
             to the inputs


.. py:function:: configurable_integer(default_value: int, header: str, min_value: int = 0, max_value: int = 255, description: str = 'Default integer description', warning: str = None, editable: bool = True, visible_in_ui: bool = True, affects_outcome_of: otx.api.configuration.enums.ModelLifecycle = ModelLifecycle.NONE, ui_rules: otx.api.configuration.ui_rules.UIRules = NullUIRules(), auto_hpo_state: otx.api.configuration.enums.AutoHPOState = AutoHPOState.NOT_POSSIBLE, auto_hpo_value: Optional[int] = None) -> int

   Constructs a configurable integer attribute, with the appropriate metadata.

   :param default_value: integer to use as default for the parameter
   :param header: User friendly name for the parameter, which will be
                  shown in the UI
   :param min_value: lower bound of the range of values this parameter can
                     take. Defaults to 0
   :param max_value: upper bound of the range of values this parameter can
                     take Defaults to 255
   :param description: A user friendly description of what this parameter
                       does, what does it represent and what are the effects of
                       changing it?
   :param warning: An optional warning message to caution users when
                   changing this parameter. This message will be displayed in
                   the UI. For example, for the parameter batch_size:
                   `Increasing batch size increases GPU memory demands and may
                   result in out of memory errors. Please update batch size
                   with caution.`
   :param editable: Set to False to prevent the parameter from being
                    edited in the UI. It can still be edited through the REST
                    API or the SDK. Defaults to True
   :param visible_in_ui: Set to False to hide the parameter from the UI
                         and the REST API. It will still be visible through the SDK.
                         Defaults to True
   :param affects_outcome_of: Describes the stage of the ModelLifecycle in
                              which this parameter modifies the outcome. See the
                              documentation for the ModelLifecycle Enum for further
                              details
   :param ui_rules: Set of rules to control UI behavior for this
                    parameter. For example, the parameter can be shown or hidden
                    from the UI based on the value of other parameters in the
                    configuration. Have a look at the UIRules class for more
                    details. Defaults to NullUIRules.
   :param auto_hpo_state: This flag reflects whether the parameter can be
                          (or has been) optimized through automatic hyper parameter
                          tuning (auto-HPO)
   :param auto_hpo_value: If auto-HPO has been executed for this
                          parameter, this field will hold the optimized value for the
                          configurable integer

   :returns: attrs Attribute of type `int`, with its metadata set according
             to the inputs


.. py:function:: float_selectable(default_value: float, header: str, options: List[float], description: str = 'Default selectable description', warning: str = None, editable: bool = True, visible_in_ui: bool = True, affects_outcome_of: otx.api.configuration.enums.ModelLifecycle = ModelLifecycle.NONE, ui_rules: otx.api.configuration.ui_rules.UIRules = NullUIRules(), auto_hpo_state: otx.api.configuration.enums.AutoHPOState = AutoHPOState.NOT_POSSIBLE, auto_hpo_value: Optional[float] = None) -> float

   Constructs a configurable float selectable attribute, with the appropriate metadata.

   :param default_value: float to use as default for the parameter
   :param header: User friendly name for the parameter, which will be
                  shown in the UI
   :param options: list of float options representing the values that this
                   parameter can take
   :param description: A user friendly description of what this parameter
                       does, what does it represent and what are the effects of
                       changing it?
   :param warning: An optional warning message to caution users when
                   changing this parameter. This message will be displayed in
                   the UI. For example, for the parameter batch_size:
                   `Increasing batch size increases GPU memory demands and may
                   result in out of memory errors. Please update batch size
                   with caution.`
   :param editable: Set to False to prevent the parameter from being
                    edited in the UI. It can still be edited through the REST
                    API or the SDK. Defaults to True
   :param visible_in_ui: Set to False to hide the parameter from the UI
                         and the REST API. It will still be visible through the SDK.
                         Defaults to True
   :param affects_outcome_of: Describes the stage of the ModelLifecycle in
                              which this parameter modifies the outcome. See the
                              documentation for the ModelLifecycle Enum for further
                              details
   :param ui_rules: Set of rules to control UI behavior for this
                    parameter. For example, the parameter can be shown or hidden
                    from the UI based on the value of other parameters in the
                    configuration. Have a look at the UIRules class for more
                    details. Defaults to NullUIRules.
   :param auto_hpo_state: This flag reflects whether the parameter can be
                          (or has been) optimized through automatic hyper parameter
                          tuning (auto-HPO)
   :param auto_hpo_value: If auto-HPO has been executed for this
                          parameter, this field will hold the optimized value for the
                          float selectable

   :returns: attrs Attribute of type `float`, with its metadata set according
             to the inputs


.. py:function:: selectable(default_value: _ConfigurableEnum, header: str, description: str = 'Default selectable description', warning: str = None, editable: bool = True, visible_in_ui: bool = True, affects_outcome_of: otx.api.configuration.enums.ModelLifecycle = ModelLifecycle.NONE, ui_rules: otx.api.configuration.ui_rules.UIRules = NullUIRules(), auto_hpo_state: otx.api.configuration.enums.AutoHPOState = AutoHPOState.NOT_POSSIBLE, auto_hpo_value: Optional[str] = None) -> _ConfigurableEnum

   Constructs a selectable attribute from a pre-defined Enum, with the appropriate metadata.

   The list of options for display in the UI is inferred from the type of the ConfigurableEnum instance passed in
   as default_value.

   :param default_value: OTXConfigurationEnum instance to use as default
                         for the parameter
   :param header: User friendly name for the parameter, which will be
                  shown in the UI
   :param description: A user friendly description of what this parameter
                       does, what does it represent and what are the effects of
                       changing it?
   :param warning: An optional warning message to caution users when
                   changing this parameter. This message will be displayed in
                   the UI. For example, for the parameter batch_size:
                   `Increasing batch size increases GPU memory demands and may
                   result in out of memory errors. Please update batch size
                   with caution.`
   :param editable: Set to False to prevent the parameter from being
                    edited in the UI. It can still be edited through the REST
                    API or the SDK. Defaults to True
   :param visible_in_ui: Set to False to hide the parameter from the UI
                         and the REST API. It will still be visible through the SDK.
                         Defaults to True
   :param affects_outcome_of: Describes the stage of the ModelLifecycle in
                              which this parameter modifies the outcome. See the
                              documentation for the ModelLifecycle Enum for further
                              details
   :param ui_rules: Set of rules to control UI behavior for this
                    parameter. For example, the parameter can be shown or hidden
                    from the UI based on the value of other parameters in the
                    configuration. Have a look at the UIRules class for more
                    details. Defaults to NullUIRules.
   :param auto_hpo_state: This flag reflects whether the parameter can be
                          (or has been) optimized through automatic hyper parameter
                          tuning (auto-HPO)
   :param auto_hpo_value: If auto-HPO has been executed for this
                          parameter, this field will hold the optimized value for the
                          string selectable

   :returns: attrs Attribute, with its type matching the type of
             `default_value`, and its metadata set according to the inputs


.. py:function:: string_attribute(value: str) -> str

   String attribute.

   Wrapper for attr.ib that can be used to overwrite simple string attributes in a class or parameter group
   definition.

   :param value: string to be added as attribute

   :returns: attr.ib string attribute with its default value set to value


