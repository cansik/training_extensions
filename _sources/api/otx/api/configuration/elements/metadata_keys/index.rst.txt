:py:mod:`otx.api.configuration.elements.metadata_keys`
======================================================

.. py:module:: otx.api.configuration.elements.metadata_keys

.. autoapi-nested-parse::

   This module contains the keys that can be used to retrieve parameter metadata.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   otx.api.configuration.elements.metadata_keys.allows_model_template_override
   otx.api.configuration.elements.metadata_keys.allows_dictionary_values
   otx.api.configuration.elements.metadata_keys.all_keys



Attributes
~~~~~~~~~~

.. autoapisummary::

   otx.api.configuration.elements.metadata_keys.DEFAULT_VALUE
   otx.api.configuration.elements.metadata_keys.MIN_VALUE
   otx.api.configuration.elements.metadata_keys.MAX_VALUE
   otx.api.configuration.elements.metadata_keys.DESCRIPTION
   otx.api.configuration.elements.metadata_keys.HEADER
   otx.api.configuration.elements.metadata_keys.WARNING
   otx.api.configuration.elements.metadata_keys.EDITABLE
   otx.api.configuration.elements.metadata_keys.VISIBLE_IN_UI
   otx.api.configuration.elements.metadata_keys.AFFECTS_OUTCOME_OF
   otx.api.configuration.elements.metadata_keys.UI_RULES
   otx.api.configuration.elements.metadata_keys.TYPE
   otx.api.configuration.elements.metadata_keys.OPTIONS
   otx.api.configuration.elements.metadata_keys.ENUM_NAME
   otx.api.configuration.elements.metadata_keys.AUTO_HPO_STATE
   otx.api.configuration.elements.metadata_keys.AUTO_HPO_VALUE


.. py:data:: DEFAULT_VALUE
   :annotation: = default_value

   

.. py:data:: MIN_VALUE
   :annotation: = min_value

   

.. py:data:: MAX_VALUE
   :annotation: = max_value

   

.. py:data:: DESCRIPTION
   :annotation: = description

   

.. py:data:: HEADER
   :annotation: = header

   

.. py:data:: WARNING
   :annotation: = warning

   

.. py:data:: EDITABLE
   :annotation: = editable

   

.. py:data:: VISIBLE_IN_UI
   :annotation: = visible_in_ui

   

.. py:data:: AFFECTS_OUTCOME_OF
   :annotation: = affects_outcome_of

   

.. py:data:: UI_RULES
   :annotation: = ui_rules

   

.. py:data:: TYPE
   :annotation: = type

   

.. py:data:: OPTIONS
   :annotation: = options

   

.. py:data:: ENUM_NAME
   :annotation: = enum_name

   

.. py:data:: AUTO_HPO_STATE
   :annotation: = auto_hpo_state

   

.. py:data:: AUTO_HPO_VALUE
   :annotation: = auto_hpo_value

   

.. py:function:: allows_model_template_override(keyword: str) -> bool

   Returns True if the metadata element described by `keyword` can be overridden in a model template file.

   :param keyword: Name of the metadata key to check.
   :type keyword: str

   :returns: True if the metadata indicated by `keyword` can be overridden in a model template .yaml file, False
             otherwise.
   :rtype: bool


.. py:function:: allows_dictionary_values(keyword: str) -> bool

   Returns True if the metadata element described by `keyword` allows having a dictionary as its value.

   :param keyword: Name of the metadata key to check.
   :type keyword: str

   :returns: True if the metadata indicated by `keyword` allows having a dictionary as its value, False otherwise.
   :rtype: bool


.. py:function:: all_keys() -> List[str]

   Returns a list of all metadata keys.

   :returns: List of all available metadata keys
   :rtype: List[str]


