:py:mod:`otx.api.configuration.enums`
=====================================

.. py:module:: otx.api.configuration.enums

.. autoapi-nested-parse::

   This module contains Enums used in the configurable parameters within the OTX.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   auto_hpo_state/index.rst
   config_element_type/index.rst
   model_lifecycle/index.rst
   utils/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.configuration.enums.AutoHPOState
   otx.api.configuration.enums.ConfigElementType
   otx.api.configuration.enums.ModelLifecycle




.. py:class:: AutoHPOState

   Bases: :py:obj:`enum.Enum`

   Holds metadata related to automatic hyper parameter optimization (auto-HPO) for a single configurable parameter.

   It contains the following values:
       NOT_POSSIBLE  - This implies that the parameter cannot be optimized via auto-HPO
       POSSIBLE      - This implies that the parameter can potentially be optimized via
                       auto-HPO, but auto-HPO has not been carried out for this parameter
                       yet
       OPTIMIZED     - This implies that the parameter has been optimized via auto-HPO,
                       such that the current value of the parameter reflects it's optimal
                       value
       OVERRIDDEN    - This implies that the parameter has previously been optimized via
                       auto-HPO, but it's value has been manually overridden

   .. py:attribute:: NOT_POSSIBLE
      :annotation: = not_possible

      

   .. py:attribute:: POSSIBLE
      :annotation: = possible

      

   .. py:attribute:: OPTIMIZED
      :annotation: = optimized

      

   .. py:attribute:: OVERRIDDEN
      :annotation: = overridden

      

   .. py:method:: __str__()

      Retrieves the string representation of an instance of the Enum.



.. py:class:: ConfigElementType(value: int, category: ElementCategory)

   Bases: :py:obj:`enum.Enum`

   This Enum represents the available elements to compose a configuration.

   Each instance holds a name, value and category representing a configuration element.

   .. py:attribute:: INTEGER
      

      

   .. py:attribute:: FLOAT
      

      

   .. py:attribute:: BOOLEAN
      

      

   .. py:attribute:: FLOAT_SELECTABLE
      

      

   .. py:attribute:: SELECTABLE
      

      

   .. py:attribute:: PARAMETER_GROUP
      

      

   .. py:attribute:: CONFIGURABLE_PARAMETERS
      

      

   .. py:attribute:: RULE
      

      

   .. py:attribute:: UI_RULES
      

      

   .. py:method:: category() -> ElementCategory
      :property:

      Returns the element category which the ConfigElementType belongs to.

      Categories are instances of the `otx.api.configuration.configuration_types.ElementCategory` Enum.


   .. py:method:: __str__()

      Retrieves the string representation of an instance of the Enum.



.. py:class:: ModelLifecycle

   Bases: :py:obj:`enum.Enum`

   This Enum represents the different stages in the ModelLifecycle.

   It is used by configuration parameters to indicate
   in which stage of the model lifecycle the parameter takes effect. Selecting a stage early in the lifecycle implies
   that all downstream stages are affected as well (e.g. if this is set to `ModelLifecycle.TRAINING`, it is assumed
   that inference and testing are also impacted).

   Currently the following stages are possible:
   ARCHITECTURE - Select this stage if the parameter modifies the model architecture, such that the most recently
       trained weights cannot directly by used for the next training round due to a model topology mismatch. For
       example, a parameter `model_depth` that controls the number of downsampling steps in a UNet model should
       have this stage set.
   TRAINING - Select this stage if the parameter is likely to change the outcome of the training process. For example,
       the parameter `learning_rate` should have this stage set.
   INFERENCE - Select this stage if the parameter changes the result of inference. For example, a parameter
       `probability_threshold` that controls the threshold for binary classification should have this stage set.
   TESTING - Select this stage if the parameter changes the outcome of the evaluation process. For example, a parameter
       'test_metric` that controls which metric to use for testing does not change training or inference results, but
       does affect the final evaluation of the model. Therefore, it should have this stage set.
   NONE - Select this stage if the parameter is non-functional, for example if it only impacts training speed but
       should not change the training outcome. For example, a parameter `num_workers` that controls the number of
       threads used in a dataloader should have this stage set.

   .. py:attribute:: NONE
      

      

   .. py:attribute:: ARCHITECTURE
      

      

   .. py:attribute:: TRAINING
      

      

   .. py:attribute:: INFERENCE
      

      

   .. py:attribute:: TESTING
      

      

   .. py:method:: __str__()

      Retrieves the string representation of an instance of the Enum.



