:py:mod:`otx.api.configuration.ui_rules.rules`
==============================================

.. py:module:: otx.api.configuration.ui_rules.rules

.. autoapi-nested-parse::

   This module contains the different ui rules elements, Rule and UIRules.

   They are used to define rules for disabling configuration parameters in the ui, conditional on the value of other
   parameters.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.configuration.ui_rules.rules.Rule
   otx.api.configuration.ui_rules.rules.UIRules
   otx.api.configuration.ui_rules.rules.NullUIRules




Attributes
~~~~~~~~~~

.. autoapisummary::

   otx.api.configuration.ui_rules.rules.ALLOWED_RULE_VALUE_TYPES


.. py:data:: ALLOWED_RULE_VALUE_TYPES
   

   

.. py:class:: Rule

   This class represents a `operator` applied to the `value` of the configurable parameter `parameter`.

   The parameter for which the rule should be evaluated is identified by name, or by a list of names representing the
   attribute path to the parameter in case of a nested configuration.

   .. py:attribute:: parameter
      :annotation: :Union[str, List[str]]

      

   .. py:attribute:: value
      :annotation: :ALLOWED_RULE_VALUE_TYPES

      

   .. py:attribute:: operator
      :annotation: :otx.api.configuration.ui_rules.types.Operator

      

   .. py:attribute:: type
      :annotation: :otx.api.configuration.enums.config_element_type.ConfigElementType

      

   .. py:method:: to_dict(enum_to_str: bool = True) -> dict

      Method to serialize a Rule instance to its dictionary representation.

      :param enum_to_str: Set to True to convert Enum instances to their string representation
      :type enum_to_str: bool

      :returns: dictionary representation of the Rule object for which this method is called
      :rtype: dict



.. py:class:: UIRules

   This class allows the combination of ExposureRules using boolean logic.

   The class can be set as an attribute of a configurable parameter. If the `rules`
   (combined according to the `operator`) evaluate to True, the corresponding`action` will be taken in the UI.

   If UIRules are nested, only the `action` of the outermost UIRule will be considered.

   .. py:attribute:: rules
      :annotation: :List[Union[Rule, UIRules]]

      

   .. py:attribute:: operator
      :annotation: :otx.api.configuration.ui_rules.types.Operator

      

   .. py:attribute:: action
      :annotation: :otx.api.configuration.ui_rules.types.Action

      

   .. py:attribute:: type
      :annotation: :otx.api.configuration.enums.config_element_type.ConfigElementType

      

   .. py:method:: add_rule(rule: Union[Rule, UIRules])

      Adds rule.


   .. py:method:: to_dict(enum_to_str: bool = True) -> dict

      Method to serialize an UIRules instance to its dictionary representation.

      Applies recursion to convert nested rules, if applicable.

      :param enum_to_str: Set to True to convert Enum instances to their
                          string representation

      :returns: dictionary representation of the UIRules object for which
                this method is called



.. py:class:: NullUIRules

   Bases: :py:obj:`UIRules`

   This class represents an empty, unset UIRules element.

   .. py:attribute:: rules
      :annotation: :List[Union[Rule, UIRules]]

      


