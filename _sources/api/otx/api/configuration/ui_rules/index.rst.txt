:py:mod:`otx.api.configuration.ui_rules`
========================================

.. py:module:: otx.api.configuration.ui_rules

.. autoapi-nested-parse::

   UI rules configuration.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   rules/index.rst
   types/index.rst
   utils/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   otx.api.configuration.ui_rules.NullUIRules
   otx.api.configuration.ui_rules.Rule
   otx.api.configuration.ui_rules.UIRules
   otx.api.configuration.ui_rules.Action
   otx.api.configuration.ui_rules.Operator




.. py:class:: NullUIRules

   Bases: :py:obj:`UIRules`

   This class represents an empty, unset UIRules element.

   .. py:attribute:: rules
      :annotation: :List[Union[Rule, UIRules]]

      


.. py:class:: Rule

   This class represents a `operator` applied to the `value` of the configurable parameter `parameter`.

   The parameter for which the rule should be evaluated is identified by name, or by a list of names representing the
   attribute path to the parameter in case of a nested configuration.

   .. py:attribute:: parameter
      :annotation: :Union[str, List[str]]

      

   .. py:attribute:: value
      :annotation: :ALLOWED_RULE_VALUE_TYPES

      

   .. py:attribute:: operator
      :annotation: :otx.api.configuration.ui_rules.types.Operator

      

   .. py:attribute:: type
      :annotation: :otx.api.configuration.enums.config_element_type.ConfigElementType

      

   .. py:method:: to_dict(enum_to_str: bool = True) -> dict

      Method to serialize a Rule instance to its dictionary representation.

      :param enum_to_str: Set to True to convert Enum instances to their string representation
      :type enum_to_str: bool

      :returns: dictionary representation of the Rule object for which this method is called
      :rtype: dict



.. py:class:: UIRules

   This class allows the combination of ExposureRules using boolean logic.

   The class can be set as an attribute of a configurable parameter. If the `rules`
   (combined according to the `operator`) evaluate to True, the corresponding`action` will be taken in the UI.

   If UIRules are nested, only the `action` of the outermost UIRule will be considered.

   .. py:attribute:: rules
      :annotation: :List[Union[Rule, UIRules]]

      

   .. py:attribute:: operator
      :annotation: :otx.api.configuration.ui_rules.types.Operator

      

   .. py:attribute:: action
      :annotation: :otx.api.configuration.ui_rules.types.Action

      

   .. py:attribute:: type
      :annotation: :otx.api.configuration.enums.config_element_type.ConfigElementType

      

   .. py:method:: add_rule(rule: Union[Rule, UIRules])

      Adds rule.


   .. py:method:: to_dict(enum_to_str: bool = True) -> dict

      Method to serialize an UIRules instance to its dictionary representation.

      Applies recursion to convert nested rules, if applicable.

      :param enum_to_str: Set to True to convert Enum instances to their
                          string representation

      :returns: dictionary representation of the UIRules object for which
                this method is called



.. py:class:: Action

   Bases: :py:obj:`enum.Enum`

   This Enum represents the allowed actions that UI rules can dictate on configuration parameters.

   .. py:attribute:: HIDE
      

      

   .. py:attribute:: SHOW
      

      

   .. py:attribute:: ENABLE_EDITING
      

      

   .. py:attribute:: DISABLE_EDITING
      

      

   .. py:method:: __str__()

      Retrieves the string representation of an instance of the Enum.



.. py:class:: Operator

   Bases: :py:obj:`enum.Enum`

   This Enum represents the allowed operators for use in constructing UI rules for configuration parameters.

   These operators can be used to disable a configuration parameter, conditional on the value of another parameter.

   .. py:attribute:: NOT
      

      

   .. py:attribute:: EQUAL_TO
      

      

   .. py:attribute:: LESS_THAN
      

      

   .. py:attribute:: GREATER_THAN
      

      

   .. py:attribute:: AND
      

      

   .. py:attribute:: OR
      

      

   .. py:attribute:: XOR
      

      

   .. py:method:: __str__()

      Retrieves the string representation of an instance of the Enum.



